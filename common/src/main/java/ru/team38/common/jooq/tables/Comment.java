/*
 * This file is generated by jOOQ.
 */
package ru.team38.common.jooq.tables;


import java.time.OffsetDateTime;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function14;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.team38.common.jooq.Keys;
import ru.team38.common.jooq.Socialnet;
import ru.team38.common.jooq.tables.records.CommentRecord;


/**
 * Таблица сущностей комментариев
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Comment extends TableImpl<CommentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>socialnet.comment</code>
     */
    public static final Comment COMMENT = new Comment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CommentRecord> getRecordType() {
        return CommentRecord.class;
    }

    /**
     * The column <code>socialnet.comment.id</code>. Идентификатор комментария
     */
    public final TableField<CommentRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "Идентификатор комментария");

    /**
     * The column <code>socialnet.comment.is_deleted</code>. Удален ли
     * комментарий
     */
    public final TableField<CommentRecord, Boolean> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "Удален ли комментарий");

    /**
     * The column <code>socialnet.comment.comment_type</code>. Тип комментария
     * (к посту - POST, к комментарию - COMMENT
     */
    public final TableField<CommentRecord, String> COMMENT_TYPE = createField(DSL.name("comment_type"), SQLDataType.CLOB.nullable(false), this, "Тип комментария (к посту - POST, к комментарию - COMMENT");

    /**
     * The column <code>socialnet.comment.time</code>. Время создания
     * комментария
     */
    public final TableField<CommentRecord, OffsetDateTime> TIME = createField(DSL.name("time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "Время создания комментария");

    /**
     * The column <code>socialnet.comment.time_changed</code>. Время последней
     * правки комментария
     */
    public final TableField<CommentRecord, OffsetDateTime> TIME_CHANGED = createField(DSL.name("time_changed"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "Время последней правки комментария");

    /**
     * The column <code>socialnet.comment.author_id</code>. Идентификатор автора
     * комментария
     */
    public final TableField<CommentRecord, UUID> AUTHOR_ID = createField(DSL.name("author_id"), SQLDataType.UUID.nullable(false), this, "Идентификатор автора комментария");

    /**
     * The column <code>socialnet.comment.parent_id</code>. Идентификатор
     * родительского комментария
     */
    public final TableField<CommentRecord, UUID> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.UUID, this, "Идентификатор родительского комментария");

    /**
     * The column <code>socialnet.comment.comment_text</code>. Тело комментария
     */
    public final TableField<CommentRecord, String> COMMENT_TEXT = createField(DSL.name("comment_text"), SQLDataType.CLOB.nullable(false), this, "Тело комментария");

    /**
     * The column <code>socialnet.comment.post_id</code>. Идентификатор поста, с
     * которым связан комментарий
     */
    public final TableField<CommentRecord, UUID> POST_ID = createField(DSL.name("post_id"), SQLDataType.UUID.nullable(false), this, "Идентификатор поста, с которым связан комментарий");

    /**
     * The column <code>socialnet.comment.is_blocked</code>. Скрыт/заблокирован
     * ли комментарий
     */
    public final TableField<CommentRecord, Boolean> IS_BLOCKED = createField(DSL.name("is_blocked"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "Скрыт/заблокирован ли комментарий");

    /**
     * The column <code>socialnet.comment.like_amount</code>. Количество лайков
     * к комментарию
     */
    public final TableField<CommentRecord, Integer> LIKE_AMOUNT = createField(DSL.name("like_amount"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "Количество лайков к комментарию");

    /**
     * The column <code>socialnet.comment.my_like</code>. Лайкнут ли комментарий
     * пользователем - инициатором вызова соответствующего метода
     */
    public final TableField<CommentRecord, Boolean> MY_LIKE = createField(DSL.name("my_like"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "Лайкнут ли комментарий пользователем - инициатором вызова соответствующего метода");

    /**
     * The column <code>socialnet.comment.comments_count</code>. Количество
     * комментариев к настоящему комментарию
     */
    public final TableField<CommentRecord, Integer> COMMENTS_COUNT = createField(DSL.name("comments_count"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "Количество комментариев к настоящему комментарию");

    /**
     * The column <code>socialnet.comment.image_path</code>. Путь к изображению
     * к комментарию
     */
    public final TableField<CommentRecord, String> IMAGE_PATH = createField(DSL.name("image_path"), SQLDataType.CLOB, this, "Путь к изображению к комментарию");

    private Comment(Name alias, Table<CommentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Comment(Name alias, Table<CommentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Таблица сущностей комментариев"), TableOptions.table());
    }

    /**
     * Create an aliased <code>socialnet.comment</code> table reference
     */
    public Comment(String alias) {
        this(DSL.name(alias), COMMENT);
    }

    /**
     * Create an aliased <code>socialnet.comment</code> table reference
     */
    public Comment(Name alias) {
        this(alias, COMMENT);
    }

    /**
     * Create a <code>socialnet.comment</code> table reference
     */
    public Comment() {
        this(DSL.name("comment"), null);
    }

    public <O extends Record> Comment(Table<O> child, ForeignKey<O, CommentRecord> key) {
        super(child, key, COMMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Socialnet.SOCIALNET;
    }

    @Override
    public UniqueKey<CommentRecord> getPrimaryKey() {
        return Keys.COMMENT_PKEY;
    }

    @Override
    public Comment as(String alias) {
        return new Comment(DSL.name(alias), this);
    }

    @Override
    public Comment as(Name alias) {
        return new Comment(alias, this);
    }

    @Override
    public Comment as(Table<?> alias) {
        return new Comment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Comment rename(String name) {
        return new Comment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Comment rename(Name name) {
        return new Comment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Comment rename(Table<?> name) {
        return new Comment(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<UUID, Boolean, String, OffsetDateTime, OffsetDateTime, UUID, UUID, String, UUID, Boolean, Integer, Boolean, Integer, String> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function14<? super UUID, ? super Boolean, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super UUID, ? super UUID, ? super String, ? super UUID, ? super Boolean, ? super Integer, ? super Boolean, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function14<? super UUID, ? super Boolean, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super UUID, ? super UUID, ? super String, ? super UUID, ? super Boolean, ? super Integer, ? super Boolean, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
