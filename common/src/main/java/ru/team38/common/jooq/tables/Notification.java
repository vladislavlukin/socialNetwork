/*
 * This file is generated by jOOQ.
 */
package ru.team38.common.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.team38.common.jooq.Indexes;
import ru.team38.common.jooq.Keys;
import ru.team38.common.jooq.Socialnet;
import ru.team38.common.jooq.tables.records.NotificationRecord;


/**
 * Таблица уведомлений
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Notification extends TableImpl<NotificationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>socialnet.notification</code>
     */
    public static final Notification NOTIFICATION = new Notification();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotificationRecord> getRecordType() {
        return NotificationRecord.class;
    }

    /**
     * The column <code>socialnet.notification.id</code>. ID события уведомления
     */
    public final TableField<NotificationRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "ID события уведомления");

    /**
     * The column <code>socialnet.notification.author_id</code>. ID аккаунта
     * автора уведомления
     */
    public final TableField<NotificationRecord, UUID> AUTHOR_ID = createField(DSL.name("author_id"), SQLDataType.UUID.nullable(false), this, "ID аккаунта автора уведомления");

    /**
     * The column <code>socialnet.notification.receiver_id</code>. ID аккаунта
     * получателя уведомления
     */
    public final TableField<NotificationRecord, UUID> RECEIVER_ID = createField(DSL.name("receiver_id"), SQLDataType.UUID.nullable(false), this, "ID аккаунта получателя уведомления");

    /**
     * The column <code>socialnet.notification.notification_type</code>. Тип
     * уведомления
     */
    public final TableField<NotificationRecord, String> NOTIFICATION_TYPE = createField(DSL.name("notification_type"), SQLDataType.VARCHAR(100).nullable(false), this, "Тип уведомления");

    /**
     * The column <code>socialnet.notification.send_time</code>. Время отправки
     * уведомления
     */
    public final TableField<NotificationRecord, LocalDateTime> SEND_TIME = createField(DSL.name("send_time"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "Время отправки уведомления");

    /**
     * The column <code>socialnet.notification.is_readed</code>. Прочитано ли
     * уведомление
     */
    public final TableField<NotificationRecord, Boolean> IS_READED = createField(DSL.name("is_readed"), SQLDataType.BOOLEAN.nullable(false), this, "Прочитано ли уведомление");

    /**
     * The column <code>socialnet.notification.content</code>. Контент
     * уведомления
     */
    public final TableField<NotificationRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.VARCHAR(255), this, "Контент уведомления");

    private Notification(Name alias, Table<NotificationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Notification(Name alias, Table<NotificationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Таблица уведомлений"), TableOptions.table());
    }

    /**
     * Create an aliased <code>socialnet.notification</code> table reference
     */
    public Notification(String alias) {
        this(DSL.name(alias), NOTIFICATION);
    }

    /**
     * Create an aliased <code>socialnet.notification</code> table reference
     */
    public Notification(Name alias) {
        this(alias, NOTIFICATION);
    }

    /**
     * Create a <code>socialnet.notification</code> table reference
     */
    public Notification() {
        this(DSL.name("notification"), null);
    }

    public <O extends Record> Notification(Table<O> child, ForeignKey<O, NotificationRecord> key) {
        super(child, key, NOTIFICATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Socialnet.SOCIALNET;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IX_NOTIFICATION_AUTHOR_ID, Indexes.IX_NOTIFICATION_RECEIVER_ID);
    }

    @Override
    public Identity<NotificationRecord, Long> getIdentity() {
        return (Identity<NotificationRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<NotificationRecord> getPrimaryKey() {
        return Keys.NOTIFICATION_PKEY;
    }

    @Override
    public Notification as(String alias) {
        return new Notification(DSL.name(alias), this);
    }

    @Override
    public Notification as(Name alias) {
        return new Notification(alias, this);
    }

    @Override
    public Notification as(Table<?> alias) {
        return new Notification(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Notification rename(String name) {
        return new Notification(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Notification rename(Name name) {
        return new Notification(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Notification rename(Table<?> name) {
        return new Notification(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, UUID, UUID, String, LocalDateTime, Boolean, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super UUID, ? super UUID, ? super String, ? super LocalDateTime, ? super Boolean, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super UUID, ? super UUID, ? super String, ? super LocalDateTime, ? super Boolean, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
