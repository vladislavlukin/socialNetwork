/*
 * This file is generated by jOOQ.
 */
package ru.team38.common.jooq.tables;


import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.team38.common.jooq.Keys;
import ru.team38.common.jooq.Socialnet;
import ru.team38.common.jooq.tables.records.FriendsRecord;


/**
 * Таблица сущности отношения аккаунта к аккаунту
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Friends extends TableImpl<FriendsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>socialnet.friends</code>
     */
    public static final Friends FRIENDS = new Friends();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FriendsRecord> getRecordType() {
        return FriendsRecord.class;
    }

    /**
     * The column <code>socialnet.friends.id</code>. Уникальный идентификатор
     * отношения
     */
    public final TableField<FriendsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "Уникальный идентификатор отношения");

    /**
     * The column <code>socialnet.friends.status_code</code>. Текстовый код -
     * статус отношения
     */
    public final TableField<FriendsRecord, String> STATUS_CODE = createField(DSL.name("status_code"), SQLDataType.CLOB.nullable(false), this, "Текстовый код - статус отношения");

    /**
     * The column <code>socialnet.friends.account_from_id</code>. Уникальный
     * идентификатор субъекта отношения
     */
    public final TableField<FriendsRecord, UUID> ACCOUNT_FROM_ID = createField(DSL.name("account_from_id"), SQLDataType.UUID.nullable(false), this, "Уникальный идентификатор субъекта отношения");

    /**
     * The column <code>socialnet.friends.requested_account_id</code>.
     * Уникальный идентификатор объекта отношения
     */
    public final TableField<FriendsRecord, UUID> REQUESTED_ACCOUNT_ID = createField(DSL.name("requested_account_id"), SQLDataType.UUID.nullable(false), this, "Уникальный идентификатор объекта отношения");

    /**
     * The column <code>socialnet.friends.previous_status</code>. Текстовый код
     * - предыдущего статуса отношения
     */
    public final TableField<FriendsRecord, String> PREVIOUS_STATUS = createField(DSL.name("previous_status"), SQLDataType.CLOB, this, "Текстовый код - предыдущего статуса отношения");

    /**
     * The column <code>socialnet.friends.rating</code>. Рейтинг
     */
    public final TableField<FriendsRecord, Short> RATING = createField(DSL.name("rating"), SQLDataType.SMALLINT, this, "Рейтинг");

    private Friends(Name alias, Table<FriendsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Friends(Name alias, Table<FriendsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Таблица сущности отношения аккаунта к аккаунту"), TableOptions.table());
    }

    /**
     * Create an aliased <code>socialnet.friends</code> table reference
     */
    public Friends(String alias) {
        this(DSL.name(alias), FRIENDS);
    }

    /**
     * Create an aliased <code>socialnet.friends</code> table reference
     */
    public Friends(Name alias) {
        this(alias, FRIENDS);
    }

    /**
     * Create a <code>socialnet.friends</code> table reference
     */
    public Friends() {
        this(DSL.name("friends"), null);
    }

    public <O extends Record> Friends(Table<O> child, ForeignKey<O, FriendsRecord> key) {
        super(child, key, FRIENDS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Socialnet.SOCIALNET;
    }

    @Override
    public Identity<FriendsRecord, Long> getIdentity() {
        return (Identity<FriendsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<FriendsRecord> getPrimaryKey() {
        return Keys.FRIENDS_PKEY;
    }

    @Override
    public Friends as(String alias) {
        return new Friends(DSL.name(alias), this);
    }

    @Override
    public Friends as(Name alias) {
        return new Friends(alias, this);
    }

    @Override
    public Friends as(Table<?> alias) {
        return new Friends(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Friends rename(String name) {
        return new Friends(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Friends rename(Name name) {
        return new Friends(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Friends rename(Table<?> name) {
        return new Friends(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, UUID, UUID, String, Short> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super String, ? super UUID, ? super UUID, ? super String, ? super Short, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super String, ? super UUID, ? super UUID, ? super String, ? super Short, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
