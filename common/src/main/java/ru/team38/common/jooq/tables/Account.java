/*
 * This file is generated by jOOQ.
 */
package ru.team38.common.jooq.tables;


import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.team38.common.jooq.Keys;
import ru.team38.common.jooq.Socialnet;
import ru.team38.common.jooq.tables.records.AccountRecord;


/**
 * Таблица для сущности аккаунта пользователя
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Account extends TableImpl<AccountRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>socialnet.account</code>
     */
    public static final Account ACCOUNT = new Account();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountRecord> getRecordType() {
        return AccountRecord.class;
    }

    /**
     * The column <code>socialnet.account.is_deleted</code>. Булевый флаг,
     * указывающий, удалена ли учетная запись
     */
    public final TableField<AccountRecord, Boolean> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.BOOLEAN.nullable(false), this, "Булевый флаг, указывающий, удалена ли учетная запись");

    /**
     * The column <code>socialnet.account.first_name</code>. Имя владельца
     * учетной записи
     */
    public final TableField<AccountRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.CLOB.nullable(false), this, "Имя владельца учетной записи");

    /**
     * The column <code>socialnet.account.last_name</code>. Фамилия владельца
     * учетной записи
     */
    public final TableField<AccountRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.CLOB.nullable(false), this, "Фамилия владельца учетной записи");

    /**
     * The column <code>socialnet.account.email</code>. Электронная почта
     * владельца учетной записи
     */
    public final TableField<AccountRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.CLOB.nullable(false), this, "Электронная почта владельца учетной записи");

    /**
     * The column <code>socialnet.account.password</code>. Хешированный пароль
     * для учетной записи
     */
    public final TableField<AccountRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.CLOB.nullable(false), this, "Хешированный пароль для учетной записи");

    /**
     * The column <code>socialnet.account.phone</code>. Телефонный номер
     * владельца учетной записи
     */
    public final TableField<AccountRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.CLOB, this, "Телефонный номер владельца учетной записи");

    /**
     * The column <code>socialnet.account.photo</code>. Ссылка на фото профайла
     * владельца учетной записи
     */
    public final TableField<AccountRecord, String> PHOTO = createField(DSL.name("photo"), SQLDataType.CLOB, this, "Ссылка на фото профайла владельца учетной записи");

    /**
     * The column <code>socialnet.account.about</code>. Содержание раздела 'О
     * себе' для учетной записи
     */
    public final TableField<AccountRecord, String> ABOUT = createField(DSL.name("about"), SQLDataType.CLOB, this, "Содержание раздела 'О себе' для учетной записи");

    /**
     * The column <code>socialnet.account.city</code>. Город владельца учетной
     * записи
     */
    public final TableField<AccountRecord, String> CITY = createField(DSL.name("city"), SQLDataType.CLOB, this, "Город владельца учетной записи");

    /**
     * The column <code>socialnet.account.country</code>. Страна владельца
     * учетной записи
     */
    public final TableField<AccountRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.CLOB, this, "Страна владельца учетной записи");

    /**
     * The column <code>socialnet.account.reg_date</code>. Время регистрации
     * учетной записи
     */
    public final TableField<AccountRecord, LocalDateTime> REG_DATE = createField(DSL.name("reg_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "Время регистрации учетной записи");

    /**
     * The column <code>socialnet.account.birth_date</code>. Дата рождения
     * владельца учетной записи
     */
    public final TableField<AccountRecord, LocalDate> BIRTH_DATE = createField(DSL.name("birth_date"), SQLDataType.LOCALDATE.nullable(false), this, "Дата рождения владельца учетной записи");

    /**
     * The column <code>socialnet.account.message_permission</code>. Булевый
     * флаг, указывающий, имеет ли учетная запись права на отправку сообщений
     */
    public final TableField<AccountRecord, Boolean> MESSAGE_PERMISSION = createField(DSL.name("message_permission"), SQLDataType.BOOLEAN.nullable(false), this, "Булевый флаг, указывающий, имеет ли учетная запись права на отправку сообщений");

    /**
     * The column <code>socialnet.account.last_online_time</code>. Время, когда
     * последний раз владелец учетной записи был в сети
     */
    public final TableField<AccountRecord, LocalDateTime> LAST_ONLINE_TIME = createField(DSL.name("last_online_time"), SQLDataType.LOCALDATETIME(6), this, "Время, когда последний раз владелец учетной записи был в сети");

    /**
     * The column <code>socialnet.account.is_online</code>. Булевый флаг,
     * указывающий, находится ли владелец учетной записи в сети
     */
    public final TableField<AccountRecord, Boolean> IS_ONLINE = createField(DSL.name("is_online"), SQLDataType.BOOLEAN.nullable(false), this, "Булевый флаг, указывающий, находится ли владелец учетной записи в сети");

    /**
     * The column <code>socialnet.account.is_blocked</code>. Булевый флаг,
     * указывающий, заблокирован ли аккаунт
     */
    public final TableField<AccountRecord, Boolean> IS_BLOCKED = createField(DSL.name("is_blocked"), SQLDataType.BOOLEAN.nullable(false), this, "Булевый флаг, указывающий, заблокирован ли аккаунт");

    /**
     * The column <code>socialnet.account.created_on</code>. Время создания
     * учетной записи
     */
    public final TableField<AccountRecord, LocalDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.LOCALDATETIME(6), this, "Время создания учетной записи");

    /**
     * The column <code>socialnet.account.updated_on</code>. Время последнего
     * обновления учетной записи
     */
    public final TableField<AccountRecord, LocalDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.LOCALDATETIME(6), this, "Время последнего обновления учетной записи");

    /**
     * The column <code>socialnet.account.id</code>. Уникальный идентификатор
     * аккаунта
     */
    public final TableField<AccountRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "Уникальный идентификатор аккаунта");

    /**
     * The column <code>socialnet.account.enable_like</code>. Разрешить события
     * с типом LIKE
     */
    public final TableField<AccountRecord, Boolean> ENABLE_LIKE = createField(DSL.name("enable_like"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "Разрешить события с типом LIKE");

    /**
     * The column <code>socialnet.account.enable_post</code>. Разрешить события
     * с типом POST
     */
    public final TableField<AccountRecord, Boolean> ENABLE_POST = createField(DSL.name("enable_post"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "Разрешить события с типом POST");

    /**
     * The column <code>socialnet.account.enable_post_comment</code>. Разрешить
     * события с типом POST_COMMENT
     */
    public final TableField<AccountRecord, Boolean> ENABLE_POST_COMMENT = createField(DSL.name("enable_post_comment"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "Разрешить события с типом POST_COMMENT");

    /**
     * The column <code>socialnet.account.enable_comment_comment</code>.
     * Разрешить события с типом COMMENT_COMMENT
     */
    public final TableField<AccountRecord, Boolean> ENABLE_COMMENT_COMMENT = createField(DSL.name("enable_comment_comment"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "Разрешить события с типом COMMENT_COMMENT");

    /**
     * The column <code>socialnet.account.enable_message</code>. Разрешить
     * события с типом MESSAGE
     */
    public final TableField<AccountRecord, Boolean> ENABLE_MESSAGE = createField(DSL.name("enable_message"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "Разрешить события с типом MESSAGE");

    /**
     * The column <code>socialnet.account.enable_friend_request</code>.
     * Разрешить события с типом FRIEND_REQUEST
     */
    public final TableField<AccountRecord, Boolean> ENABLE_FRIEND_REQUEST = createField(DSL.name("enable_friend_request"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "Разрешить события с типом FRIEND_REQUEST");

    /**
     * The column <code>socialnet.account.enable_friend_birthday</code>.
     * Разрешить события с типом FRIEND_BIRTHDAY
     */
    public final TableField<AccountRecord, Boolean> ENABLE_FRIEND_BIRTHDAY = createField(DSL.name("enable_friend_birthday"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "Разрешить события с типом FRIEND_BIRTHDAY");

    /**
     * The column <code>socialnet.account.enable_send_email_message</code>.
     * Разрешить события с типом SEND_EMAIL_MESSAGE
     */
    public final TableField<AccountRecord, Boolean> ENABLE_SEND_EMAIL_MESSAGE = createField(DSL.name("enable_send_email_message"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "Разрешить события с типом SEND_EMAIL_MESSAGE");

    /**
     * The column <code>socialnet.account.profile_cover</code>. Ссылка на фото
     * профайла владельца учетной записи
     */
    public final TableField<AccountRecord, String> PROFILE_COVER = createField(DSL.name("profile_cover"), SQLDataType.VARCHAR(255), this, "Ссылка на фото профайла владельца учетной записи");

    private Account(Name alias, Table<AccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private Account(Name alias, Table<AccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Таблица для сущности аккаунта пользователя"), TableOptions.table());
    }

    /**
     * Create an aliased <code>socialnet.account</code> table reference
     */
    public Account(String alias) {
        this(DSL.name(alias), ACCOUNT);
    }

    /**
     * Create an aliased <code>socialnet.account</code> table reference
     */
    public Account(Name alias) {
        this(alias, ACCOUNT);
    }

    /**
     * Create a <code>socialnet.account</code> table reference
     */
    public Account() {
        this(DSL.name("account"), null);
    }

    public <O extends Record> Account(Table<O> child, ForeignKey<O, AccountRecord> key) {
        super(child, key, ACCOUNT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Socialnet.SOCIALNET;
    }

    @Override
    public UniqueKey<AccountRecord> getPrimaryKey() {
        return Keys.ACCOUNT_PKEY;
    }

    @Override
    public List<UniqueKey<AccountRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.ACCOUNT_EMAIL_KEY);
    }

    @Override
    public Account as(String alias) {
        return new Account(DSL.name(alias), this);
    }

    @Override
    public Account as(Name alias) {
        return new Account(alias, this);
    }

    @Override
    public Account as(Table<?> alias) {
        return new Account(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Account rename(String name) {
        return new Account(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Account rename(Name name) {
        return new Account(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Account rename(Table<?> name) {
        return new Account(name.getQualifiedName(), null);
    }
}
