/*
 * This file is generated by jOOQ.
 */
package ru.team38.common.jooq.tables;


import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.team38.common.jooq.Keys;
import ru.team38.common.jooq.Socialnet;
import ru.team38.common.jooq.tables.records.CountriesRecord;


/**
 * Таблица для хранения стран
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Countries extends TableImpl<CountriesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>socialnet.countries</code>
     */
    public static final Countries COUNTRIES = new Countries();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CountriesRecord> getRecordType() {
        return CountriesRecord.class;
    }

    /**
     * The column <code>socialnet.countries.id</code>. Уникальный идентификатор
     * страны
     */
    public final TableField<CountriesRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "Уникальный идентификатор страны");

    /**
     * The column <code>socialnet.countries.country_id</code>. ID страны
     */
    public final TableField<CountriesRecord, Long> COUNTRY_ID = createField(DSL.name("country_id"), SQLDataType.BIGINT, this, "ID страны");

    /**
     * The column <code>socialnet.countries.country_name</code>. Название страны
     */
    public final TableField<CountriesRecord, String> COUNTRY_NAME = createField(DSL.name("country_name"), SQLDataType.VARCHAR(255), this, "Название страны");

    /**
     * The column <code>socialnet.countries.is_deleted</code>. Флаг,
     * указывающий, удалена ли страна
     */
    public final TableField<CountriesRecord, Boolean> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.BOOLEAN.nullable(false), this, "Флаг, указывающий, удалена ли страна");

    private Countries(Name alias, Table<CountriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Countries(Name alias, Table<CountriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Таблица для хранения стран"), TableOptions.table());
    }

    /**
     * Create an aliased <code>socialnet.countries</code> table reference
     */
    public Countries(String alias) {
        this(DSL.name(alias), COUNTRIES);
    }

    /**
     * Create an aliased <code>socialnet.countries</code> table reference
     */
    public Countries(Name alias) {
        this(alias, COUNTRIES);
    }

    /**
     * Create a <code>socialnet.countries</code> table reference
     */
    public Countries() {
        this(DSL.name("countries"), null);
    }

    public <O extends Record> Countries(Table<O> child, ForeignKey<O, CountriesRecord> key) {
        super(child, key, COUNTRIES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Socialnet.SOCIALNET;
    }

    @Override
    public UniqueKey<CountriesRecord> getPrimaryKey() {
        return Keys.COUNTRIES_PKEY;
    }

    @Override
    public Countries as(String alias) {
        return new Countries(DSL.name(alias), this);
    }

    @Override
    public Countries as(Name alias) {
        return new Countries(alias, this);
    }

    @Override
    public Countries as(Table<?> alias) {
        return new Countries(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Countries rename(String name) {
        return new Countries(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Countries rename(Name name) {
        return new Countries(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Countries rename(Table<?> name) {
        return new Countries(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, String, Boolean> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super Long, ? super String, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super Long, ? super String, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
