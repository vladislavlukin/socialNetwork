/*
 * This file is generated by jOOQ.
 */
package ru.team38.common.jooq;


import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;

import ru.team38.common.jooq.tables.Account;
import ru.team38.common.jooq.tables.Cities;
import ru.team38.common.jooq.tables.Comment;
import ru.team38.common.jooq.tables.Countries;
import ru.team38.common.jooq.tables.FileStorage;
import ru.team38.common.jooq.tables.Friends;
import ru.team38.common.jooq.tables.Like;
import ru.team38.common.jooq.tables.Message;
import ru.team38.common.jooq.tables.Notification;
import ru.team38.common.jooq.tables.Post;
import ru.team38.common.jooq.tables.Tag;
import ru.team38.common.jooq.tables.Tokens;
import ru.team38.common.jooq.tables.records.AccountRecord;
import ru.team38.common.jooq.tables.records.CitiesRecord;
import ru.team38.common.jooq.tables.records.CommentRecord;
import ru.team38.common.jooq.tables.records.CountriesRecord;
import ru.team38.common.jooq.tables.records.FileStorageRecord;
import ru.team38.common.jooq.tables.records.FriendsRecord;
import ru.team38.common.jooq.tables.records.LikeRecord;
import ru.team38.common.jooq.tables.records.MessageRecord;
import ru.team38.common.jooq.tables.records.NotificationRecord;
import ru.team38.common.jooq.tables.records.PostRecord;
import ru.team38.common.jooq.tables.records.TagRecord;
import ru.team38.common.jooq.tables.records.TokensRecord;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * socialnet.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccountRecord> ACCOUNT_EMAIL_KEY = Internal.createUniqueKey(Account.ACCOUNT, DSL.name("account_email_key"), new TableField[] { Account.ACCOUNT.EMAIL }, true);
    public static final UniqueKey<AccountRecord> ACCOUNT_PKEY = Internal.createUniqueKey(Account.ACCOUNT, DSL.name("account_pkey"), new TableField[] { Account.ACCOUNT.ID }, true);
    public static final UniqueKey<CitiesRecord> CITIES_PKEY = Internal.createUniqueKey(Cities.CITIES, DSL.name("cities_pkey"), new TableField[] { Cities.CITIES.ID }, true);
    public static final UniqueKey<CommentRecord> COMMENT_PKEY = Internal.createUniqueKey(Comment.COMMENT, DSL.name("comment_pkey"), new TableField[] { Comment.COMMENT.ID }, true);
    public static final UniqueKey<CountriesRecord> COUNTRIES_PKEY = Internal.createUniqueKey(Countries.COUNTRIES, DSL.name("countries_pkey"), new TableField[] { Countries.COUNTRIES.ID }, true);
    public static final UniqueKey<FileStorageRecord> FILE_STORAGE_PATH_KEY = Internal.createUniqueKey(FileStorage.FILE_STORAGE, DSL.name("file-storage_path_key"), new TableField[] { FileStorage.FILE_STORAGE.PATH }, true);
    public static final UniqueKey<FileStorageRecord> FILE_STORAGE_PKEY = Internal.createUniqueKey(FileStorage.FILE_STORAGE, DSL.name("file_storage_pkey"), new TableField[] { FileStorage.FILE_STORAGE.ID }, true);
    public static final UniqueKey<FriendsRecord> FRIENDS_PKEY = Internal.createUniqueKey(Friends.FRIENDS, DSL.name("friends_pkey"), new TableField[] { Friends.FRIENDS.ID }, true);
    public static final UniqueKey<LikeRecord> LIKE_PKEY = Internal.createUniqueKey(Like.LIKE, DSL.name("like_pkey"), new TableField[] { Like.LIKE.ID }, true);
    public static final UniqueKey<MessageRecord> MESSAGE_ID_KEY = Internal.createUniqueKey(Message.MESSAGE, DSL.name("message_id_key"), new TableField[] { Message.MESSAGE.ID }, true);
    public static final UniqueKey<MessageRecord> MESSAGE_PKEY = Internal.createUniqueKey(Message.MESSAGE, DSL.name("message_pkey"), new TableField[] { Message.MESSAGE.ID }, true);
    public static final UniqueKey<NotificationRecord> NOTIFICATION_PKEY = Internal.createUniqueKey(Notification.NOTIFICATION, DSL.name("notification_pkey"), new TableField[] { Notification.NOTIFICATION.ID }, true);
    public static final UniqueKey<PostRecord> POST_PKEY = Internal.createUniqueKey(Post.POST, DSL.name("post_pkey"), new TableField[] { Post.POST.ID }, true);
    public static final UniqueKey<TagRecord> TAGS_PKEY = Internal.createUniqueKey(Tag.TAG, DSL.name("tags_pkey"), new TableField[] { Tag.TAG.ID }, true);
    public static final UniqueKey<TokensRecord> TOKENS_PKEY = Internal.createUniqueKey(Tokens.TOKENS, DSL.name("tokens_pkey"), new TableField[] { Tokens.TOKENS.ID }, true);
}
