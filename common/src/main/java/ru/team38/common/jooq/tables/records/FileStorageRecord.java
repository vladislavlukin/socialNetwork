/*
 * This file is generated by jOOQ.
 */
package ru.team38.common.jooq.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import ru.team38.common.jooq.tables.FileStorage;


/**
 * Таблица ссылок на файлы
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FileStorageRecord extends UpdatableRecordImpl<FileStorageRecord> implements Record3<Long, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>socialnet.file-storage.id</code>. ID файла
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>socialnet.file-storage.id</code>. ID файла
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>socialnet.file-storage.filename</code>. Имя файла при
     * загрузке
     */
    public void setFilename(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>socialnet.file-storage.filename</code>. Имя файла при
     * загрузке
     */
    public String getFilename() {
        return (String) get(1);
    }

    /**
     * Setter for <code>socialnet.file-storage.path</code>. Путь к файлу в
     * хранилище
     */
    public void setPath(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>socialnet.file-storage.path</code>. Путь к файлу в
     * хранилище
     */
    public String getPath() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return FileStorage.FILE_STORAGE.ID;
    }

    @Override
    public Field<String> field2() {
        return FileStorage.FILE_STORAGE.FILENAME;
    }

    @Override
    public Field<String> field3() {
        return FileStorage.FILE_STORAGE.PATH;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getFilename();
    }

    @Override
    public String component3() {
        return getPath();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getFilename();
    }

    @Override
    public String value3() {
        return getPath();
    }

    @Override
    public FileStorageRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public FileStorageRecord value2(String value) {
        setFilename(value);
        return this;
    }

    @Override
    public FileStorageRecord value3(String value) {
        setPath(value);
        return this;
    }

    @Override
    public FileStorageRecord values(Long value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FileStorageRecord
     */
    public FileStorageRecord() {
        super(FileStorage.FILE_STORAGE);
    }

    /**
     * Create a detached, initialised FileStorageRecord
     */
    public FileStorageRecord(Long id, String filename, String path) {
        super(FileStorage.FILE_STORAGE);

        setId(id);
        setFilename(filename);
        setPath(path);
        resetChangedOnNotNull();
    }
}
