/*
 * This file is generated by jOOQ.
 */
package ru.team38.common.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.team38.common.jooq.Keys;
import ru.team38.common.jooq.Socialnet;
import ru.team38.common.jooq.tables.records.MessageRecord;


/**
 * Таблица для сущности сообщения
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Message extends TableImpl<MessageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>socialnet.message</code>
     */
    public static final Message MESSAGE = new Message();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessageRecord> getRecordType() {
        return MessageRecord.class;
    }

    /**
     * The column <code>socialnet.message.id</code>. Уникальный идентификатор
     * сообщения
     */
    public final TableField<MessageRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "Уникальный идентификатор сообщения");

    /**
     * The column <code>socialnet.message.is_deleted</code>. Флаг, указывающий,
     * удалено ли сообщение
     */
    public final TableField<MessageRecord, Boolean> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.BOOLEAN.nullable(false), this, "Флаг, указывающий, удалено ли сообщение");

    /**
     * The column <code>socialnet.message.time</code>. Дата и время отправки
     * сообщения
     */
    public final TableField<MessageRecord, LocalDateTime> TIME = createField(DSL.name("time"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "Дата и время отправки сообщения");

    /**
     * The column <code>socialnet.message.conversation_partner1</code>.
     * Уникальный идентификатор первого собеседника
     */
    public final TableField<MessageRecord, UUID> CONVERSATION_PARTNER1 = createField(DSL.name("conversation_partner1"), SQLDataType.UUID.nullable(false), this, "Уникальный идентификатор первого собеседника");

    /**
     * The column <code>socialnet.message.conversation_partner2</code>.
     * Уникальный идентификатор второго собеседника
     */
    public final TableField<MessageRecord, UUID> CONVERSATION_PARTNER2 = createField(DSL.name("conversation_partner2"), SQLDataType.UUID.nullable(false), this, "Уникальный идентификатор второго собеседника");

    /**
     * The column <code>socialnet.message.message_text</code>. Текст сообщения
     */
    public final TableField<MessageRecord, String> MESSAGE_TEXT = createField(DSL.name("message_text"), SQLDataType.CLOB.nullable(false), this, "Текст сообщения");

    /**
     * The column <code>socialnet.message.read_status</code>. Текстовый код -
     * статус прочтения
     */
    public final TableField<MessageRecord, String> READ_STATUS = createField(DSL.name("read_status"), SQLDataType.CLOB.nullable(false), this, "Текстовый код - статус прочтения");

    /**
     * The column <code>socialnet.message.dialog_id</code>. Уникальный
     * идентификатор диалога
     */
    public final TableField<MessageRecord, UUID> DIALOG_ID = createField(DSL.name("dialog_id"), SQLDataType.UUID.nullable(false), this, "Уникальный идентификатор диалога");

    private Message(Name alias, Table<MessageRecord> aliased) {
        this(alias, aliased, null);
    }

    private Message(Name alias, Table<MessageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Таблица для сущности сообщения"), TableOptions.table());
    }

    /**
     * Create an aliased <code>socialnet.message</code> table reference
     */
    public Message(String alias) {
        this(DSL.name(alias), MESSAGE);
    }

    /**
     * Create an aliased <code>socialnet.message</code> table reference
     */
    public Message(Name alias) {
        this(alias, MESSAGE);
    }

    /**
     * Create a <code>socialnet.message</code> table reference
     */
    public Message() {
        this(DSL.name("message"), null);
    }

    public <O extends Record> Message(Table<O> child, ForeignKey<O, MessageRecord> key) {
        super(child, key, MESSAGE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Socialnet.SOCIALNET;
    }

    @Override
    public UniqueKey<MessageRecord> getPrimaryKey() {
        return Keys.MESSAGE_PKEY;
    }

    @Override
    public List<UniqueKey<MessageRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.MESSAGE_ID_KEY);
    }

    @Override
    public Message as(String alias) {
        return new Message(DSL.name(alias), this);
    }

    @Override
    public Message as(Name alias) {
        return new Message(alias, this);
    }

    @Override
    public Message as(Table<?> alias) {
        return new Message(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Message rename(String name) {
        return new Message(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Message rename(Name name) {
        return new Message(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Message rename(Table<?> name) {
        return new Message(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, Boolean, LocalDateTime, UUID, UUID, String, String, UUID> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super UUID, ? super Boolean, ? super LocalDateTime, ? super UUID, ? super UUID, ? super String, ? super String, ? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super UUID, ? super Boolean, ? super LocalDateTime, ? super UUID, ? super UUID, ? super String, ? super String, ? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
