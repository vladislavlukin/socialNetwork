/*
 * This file is generated by jOOQ.
 */
package ru.team38.common.jooq.tables.records;


import java.time.LocalDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;

import ru.team38.common.jooq.tables.Notification;


/**
 * Таблица уведомлений
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NotificationRecord extends UpdatableRecordImpl<NotificationRecord> implements Record7<Long, UUID, UUID, String, LocalDateTime, Boolean, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>socialnet.notification.id</code>. ID события уведомления
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>socialnet.notification.id</code>. ID события уведомления
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>socialnet.notification.author_id</code>. ID аккаунта
     * автора уведомления
     */
    public void setAuthorId(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>socialnet.notification.author_id</code>. ID аккаунта
     * автора уведомления
     */
    public UUID getAuthorId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>socialnet.notification.receiver_id</code>. ID аккаунта
     * получателя уведомления
     */
    public void setReceiverId(UUID value) {
        set(2, value);
    }

    /**
     * Getter for <code>socialnet.notification.receiver_id</code>. ID аккаунта
     * получателя уведомления
     */
    public UUID getReceiverId() {
        return (UUID) get(2);
    }

    /**
     * Setter for <code>socialnet.notification.notification_type</code>. Тип
     * уведомления
     */
    public void setNotificationType(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>socialnet.notification.notification_type</code>. Тип
     * уведомления
     */
    public String getNotificationType() {
        return (String) get(3);
    }

    /**
     * Setter for <code>socialnet.notification.send_time</code>. Время отправки
     * уведомления
     */
    public void setSendTime(LocalDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>socialnet.notification.send_time</code>. Время отправки
     * уведомления
     */
    public LocalDateTime getSendTime() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>socialnet.notification.is_readed</code>. Прочитано ли
     * уведомление
     */
    public void setIsReaded(Boolean value) {
        set(5, value);
    }

    /**
     * Getter for <code>socialnet.notification.is_readed</code>. Прочитано ли
     * уведомление
     */
    public Boolean getIsReaded() {
        return (Boolean) get(5);
    }

    /**
     * Setter for <code>socialnet.notification.content</code>. Контент
     * уведомления
     */
    public void setContent(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>socialnet.notification.content</code>. Контент
     * уведомления
     */
    public String getContent() {
        return (String) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, UUID, UUID, String, LocalDateTime, Boolean, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Long, UUID, UUID, String, LocalDateTime, Boolean, String> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Notification.NOTIFICATION.ID;
    }

    @Override
    public Field<UUID> field2() {
        return Notification.NOTIFICATION.AUTHOR_ID;
    }

    @Override
    public Field<UUID> field3() {
        return Notification.NOTIFICATION.RECEIVER_ID;
    }

    @Override
    public Field<String> field4() {
        return Notification.NOTIFICATION.NOTIFICATION_TYPE;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return Notification.NOTIFICATION.SEND_TIME;
    }

    @Override
    public Field<Boolean> field6() {
        return Notification.NOTIFICATION.IS_READED;
    }

    @Override
    public Field<String> field7() {
        return Notification.NOTIFICATION.CONTENT;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public UUID component2() {
        return getAuthorId();
    }

    @Override
    public UUID component3() {
        return getReceiverId();
    }

    @Override
    public String component4() {
        return getNotificationType();
    }

    @Override
    public LocalDateTime component5() {
        return getSendTime();
    }

    @Override
    public Boolean component6() {
        return getIsReaded();
    }

    @Override
    public String component7() {
        return getContent();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public UUID value2() {
        return getAuthorId();
    }

    @Override
    public UUID value3() {
        return getReceiverId();
    }

    @Override
    public String value4() {
        return getNotificationType();
    }

    @Override
    public LocalDateTime value5() {
        return getSendTime();
    }

    @Override
    public Boolean value6() {
        return getIsReaded();
    }

    @Override
    public String value7() {
        return getContent();
    }

    @Override
    public NotificationRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public NotificationRecord value2(UUID value) {
        setAuthorId(value);
        return this;
    }

    @Override
    public NotificationRecord value3(UUID value) {
        setReceiverId(value);
        return this;
    }

    @Override
    public NotificationRecord value4(String value) {
        setNotificationType(value);
        return this;
    }

    @Override
    public NotificationRecord value5(LocalDateTime value) {
        setSendTime(value);
        return this;
    }

    @Override
    public NotificationRecord value6(Boolean value) {
        setIsReaded(value);
        return this;
    }

    @Override
    public NotificationRecord value7(String value) {
        setContent(value);
        return this;
    }

    @Override
    public NotificationRecord values(Long value1, UUID value2, UUID value3, String value4, LocalDateTime value5, Boolean value6, String value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached NotificationRecord
     */
    public NotificationRecord() {
        super(Notification.NOTIFICATION);
    }

    /**
     * Create a detached, initialised NotificationRecord
     */
    public NotificationRecord(Long id, UUID authorId, UUID receiverId, String notificationType, LocalDateTime sendTime, Boolean isReaded, String content) {
        super(Notification.NOTIFICATION);

        setId(id);
        setAuthorId(authorId);
        setReceiverId(receiverId);
        setNotificationType(notificationType);
        setSendTime(sendTime);
        setIsReaded(isReaded);
        setContent(content);
        resetChangedOnNotNull();
    }
}
