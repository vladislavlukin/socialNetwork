/*
 * This file is generated by jOOQ.
 */
package ru.team38.common.jooq.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import ru.team38.common.jooq.tables.Tag;


/**
 * Таблица для хранения тегов
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TagRecord extends UpdatableRecordImpl<TagRecord> implements Record3<Long, Boolean, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>socialnet.tag.id</code>. Уникальный идентификатор записи
     * журнала изменений
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>socialnet.tag.id</code>. Уникальный идентификатор записи
     * журнала изменений
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>socialnet.tag.is_deleted</code>. Флаг, указывающий,
     * удалена ли запись журнала изменений
     */
    public void setIsDeleted(Boolean value) {
        set(1, value);
    }

    /**
     * Getter for <code>socialnet.tag.is_deleted</code>. Флаг, указывающий,
     * удалена ли запись журнала изменений
     */
    public Boolean getIsDeleted() {
        return (Boolean) get(1);
    }

    /**
     * Setter for <code>socialnet.tag.name</code>. Значение тега
     */
    public void setName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>socialnet.tag.name</code>. Значение тега
     */
    public String getName() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Boolean, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, Boolean, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Tag.TAG.ID;
    }

    @Override
    public Field<Boolean> field2() {
        return Tag.TAG.IS_DELETED;
    }

    @Override
    public Field<String> field3() {
        return Tag.TAG.NAME;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Boolean component2() {
        return getIsDeleted();
    }

    @Override
    public String component3() {
        return getName();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Boolean value2() {
        return getIsDeleted();
    }

    @Override
    public String value3() {
        return getName();
    }

    @Override
    public TagRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public TagRecord value2(Boolean value) {
        setIsDeleted(value);
        return this;
    }

    @Override
    public TagRecord value3(String value) {
        setName(value);
        return this;
    }

    @Override
    public TagRecord values(Long value1, Boolean value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TagRecord
     */
    public TagRecord() {
        super(Tag.TAG);
    }

    /**
     * Create a detached, initialised TagRecord
     */
    public TagRecord(Long id, Boolean isDeleted, String name) {
        super(Tag.TAG);

        setId(id);
        setIsDeleted(isDeleted);
        setName(name);
        resetChangedOnNotNull();
    }
}
