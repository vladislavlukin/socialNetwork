/*
 * This file is generated by jOOQ.
 */
package ru.team38.common.jooq.tables.records;


import java.time.LocalDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;

import ru.team38.common.jooq.tables.Message;


/**
 * Таблица для сущности сообщения
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MessageRecord extends UpdatableRecordImpl<MessageRecord> implements Record8<UUID, Boolean, LocalDateTime, UUID, UUID, String, String, UUID> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>socialnet.message.id</code>. Уникальный идентификатор
     * сообщения
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>socialnet.message.id</code>. Уникальный идентификатор
     * сообщения
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>socialnet.message.is_deleted</code>. Флаг, указывающий,
     * удалено ли сообщение
     */
    public void setIsDeleted(Boolean value) {
        set(1, value);
    }

    /**
     * Getter for <code>socialnet.message.is_deleted</code>. Флаг, указывающий,
     * удалено ли сообщение
     */
    public Boolean getIsDeleted() {
        return (Boolean) get(1);
    }

    /**
     * Setter for <code>socialnet.message.time</code>. Дата и время отправки
     * сообщения
     */
    public void setTime(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>socialnet.message.time</code>. Дата и время отправки
     * сообщения
     */
    public LocalDateTime getTime() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>socialnet.message.conversation_partner1</code>.
     * Уникальный идентификатор первого собеседника
     */
    public void setConversationPartner1(UUID value) {
        set(3, value);
    }

    /**
     * Getter for <code>socialnet.message.conversation_partner1</code>.
     * Уникальный идентификатор первого собеседника
     */
    public UUID getConversationPartner1() {
        return (UUID) get(3);
    }

    /**
     * Setter for <code>socialnet.message.conversation_partner2</code>.
     * Уникальный идентификатор второго собеседника
     */
    public void setConversationPartner2(UUID value) {
        set(4, value);
    }

    /**
     * Getter for <code>socialnet.message.conversation_partner2</code>.
     * Уникальный идентификатор второго собеседника
     */
    public UUID getConversationPartner2() {
        return (UUID) get(4);
    }

    /**
     * Setter for <code>socialnet.message.message_text</code>. Текст сообщения
     */
    public void setMessageText(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>socialnet.message.message_text</code>. Текст сообщения
     */
    public String getMessageText() {
        return (String) get(5);
    }

    /**
     * Setter for <code>socialnet.message.read_status</code>. Текстовый код -
     * статус прочтения
     */
    public void setReadStatus(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>socialnet.message.read_status</code>. Текстовый код -
     * статус прочтения
     */
    public String getReadStatus() {
        return (String) get(6);
    }

    /**
     * Setter for <code>socialnet.message.dialog_id</code>. Уникальный
     * идентификатор диалога
     */
    public void setDialogId(UUID value) {
        set(7, value);
    }

    /**
     * Getter for <code>socialnet.message.dialog_id</code>. Уникальный
     * идентификатор диалога
     */
    public UUID getDialogId() {
        return (UUID) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, Boolean, LocalDateTime, UUID, UUID, String, String, UUID> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<UUID, Boolean, LocalDateTime, UUID, UUID, String, String, UUID> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Message.MESSAGE.ID;
    }

    @Override
    public Field<Boolean> field2() {
        return Message.MESSAGE.IS_DELETED;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return Message.MESSAGE.TIME;
    }

    @Override
    public Field<UUID> field4() {
        return Message.MESSAGE.CONVERSATION_PARTNER1;
    }

    @Override
    public Field<UUID> field5() {
        return Message.MESSAGE.CONVERSATION_PARTNER2;
    }

    @Override
    public Field<String> field6() {
        return Message.MESSAGE.MESSAGE_TEXT;
    }

    @Override
    public Field<String> field7() {
        return Message.MESSAGE.READ_STATUS;
    }

    @Override
    public Field<UUID> field8() {
        return Message.MESSAGE.DIALOG_ID;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public Boolean component2() {
        return getIsDeleted();
    }

    @Override
    public LocalDateTime component3() {
        return getTime();
    }

    @Override
    public UUID component4() {
        return getConversationPartner1();
    }

    @Override
    public UUID component5() {
        return getConversationPartner2();
    }

    @Override
    public String component6() {
        return getMessageText();
    }

    @Override
    public String component7() {
        return getReadStatus();
    }

    @Override
    public UUID component8() {
        return getDialogId();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public Boolean value2() {
        return getIsDeleted();
    }

    @Override
    public LocalDateTime value3() {
        return getTime();
    }

    @Override
    public UUID value4() {
        return getConversationPartner1();
    }

    @Override
    public UUID value5() {
        return getConversationPartner2();
    }

    @Override
    public String value6() {
        return getMessageText();
    }

    @Override
    public String value7() {
        return getReadStatus();
    }

    @Override
    public UUID value8() {
        return getDialogId();
    }

    @Override
    public MessageRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public MessageRecord value2(Boolean value) {
        setIsDeleted(value);
        return this;
    }

    @Override
    public MessageRecord value3(LocalDateTime value) {
        setTime(value);
        return this;
    }

    @Override
    public MessageRecord value4(UUID value) {
        setConversationPartner1(value);
        return this;
    }

    @Override
    public MessageRecord value5(UUID value) {
        setConversationPartner2(value);
        return this;
    }

    @Override
    public MessageRecord value6(String value) {
        setMessageText(value);
        return this;
    }

    @Override
    public MessageRecord value7(String value) {
        setReadStatus(value);
        return this;
    }

    @Override
    public MessageRecord value8(UUID value) {
        setDialogId(value);
        return this;
    }

    @Override
    public MessageRecord values(UUID value1, Boolean value2, LocalDateTime value3, UUID value4, UUID value5, String value6, String value7, UUID value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MessageRecord
     */
    public MessageRecord() {
        super(Message.MESSAGE);
    }

    /**
     * Create a detached, initialised MessageRecord
     */
    public MessageRecord(UUID id, Boolean isDeleted, LocalDateTime time, UUID conversationPartner1, UUID conversationPartner2, String messageText, String readStatus, UUID dialogId) {
        super(Message.MESSAGE);

        setId(id);
        setIsDeleted(isDeleted);
        setTime(time);
        setConversationPartner1(conversationPartner1);
        setConversationPartner2(conversationPartner2);
        setMessageText(messageText);
        setReadStatus(readStatus);
        setDialogId(dialogId);
        resetChangedOnNotNull();
    }
}
