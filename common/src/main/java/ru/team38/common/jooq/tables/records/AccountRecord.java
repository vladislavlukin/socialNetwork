/*
 * This file is generated by jOOQ.
 */
package ru.team38.common.jooq.tables.records;


import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.UUID;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import ru.team38.common.jooq.tables.Account;


/**
 * Таблица для сущности аккаунта пользователя
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountRecord extends UpdatableRecordImpl<AccountRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>socialnet.account.is_deleted</code>. Булевый флаг,
     * указывающий, удалена ли учетная запись
     */
    public void setIsDeleted(Boolean value) {
        set(0, value);
    }

    /**
     * Getter for <code>socialnet.account.is_deleted</code>. Булевый флаг,
     * указывающий, удалена ли учетная запись
     */
    public Boolean getIsDeleted() {
        return (Boolean) get(0);
    }

    /**
     * Setter for <code>socialnet.account.first_name</code>. Имя владельца
     * учетной записи
     */
    public void setFirstName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>socialnet.account.first_name</code>. Имя владельца
     * учетной записи
     */
    public String getFirstName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>socialnet.account.last_name</code>. Фамилия владельца
     * учетной записи
     */
    public void setLastName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>socialnet.account.last_name</code>. Фамилия владельца
     * учетной записи
     */
    public String getLastName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>socialnet.account.email</code>. Электронная почта
     * владельца учетной записи
     */
    public void setEmail(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>socialnet.account.email</code>. Электронная почта
     * владельца учетной записи
     */
    public String getEmail() {
        return (String) get(3);
    }

    /**
     * Setter for <code>socialnet.account.password</code>. Хешированный пароль
     * для учетной записи
     */
    public void setPassword(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>socialnet.account.password</code>. Хешированный пароль
     * для учетной записи
     */
    public String getPassword() {
        return (String) get(4);
    }

    /**
     * Setter for <code>socialnet.account.phone</code>. Телефонный номер
     * владельца учетной записи
     */
    public void setPhone(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>socialnet.account.phone</code>. Телефонный номер
     * владельца учетной записи
     */
    public String getPhone() {
        return (String) get(5);
    }

    /**
     * Setter for <code>socialnet.account.photo</code>. Ссылка на фото профайла
     * владельца учетной записи
     */
    public void setPhoto(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>socialnet.account.photo</code>. Ссылка на фото профайла
     * владельца учетной записи
     */
    public String getPhoto() {
        return (String) get(6);
    }

    /**
     * Setter for <code>socialnet.account.about</code>. Содержание раздела 'О
     * себе' для учетной записи
     */
    public void setAbout(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>socialnet.account.about</code>. Содержание раздела 'О
     * себе' для учетной записи
     */
    public String getAbout() {
        return (String) get(7);
    }

    /**
     * Setter for <code>socialnet.account.city</code>. Город владельца учетной
     * записи
     */
    public void setCity(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>socialnet.account.city</code>. Город владельца учетной
     * записи
     */
    public String getCity() {
        return (String) get(8);
    }

    /**
     * Setter for <code>socialnet.account.country</code>. Страна владельца
     * учетной записи
     */
    public void setCountry(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>socialnet.account.country</code>. Страна владельца
     * учетной записи
     */
    public String getCountry() {
        return (String) get(9);
    }

    /**
     * Setter for <code>socialnet.account.reg_date</code>. Время регистрации
     * учетной записи
     */
    public void setRegDate(LocalDateTime value) {
        set(10, value);
    }

    /**
     * Getter for <code>socialnet.account.reg_date</code>. Время регистрации
     * учетной записи
     */
    public LocalDateTime getRegDate() {
        return (LocalDateTime) get(10);
    }

    /**
     * Setter for <code>socialnet.account.birth_date</code>. Дата рождения
     * владельца учетной записи
     */
    public void setBirthDate(LocalDate value) {
        set(11, value);
    }

    /**
     * Getter for <code>socialnet.account.birth_date</code>. Дата рождения
     * владельца учетной записи
     */
    public LocalDate getBirthDate() {
        return (LocalDate) get(11);
    }

    /**
     * Setter for <code>socialnet.account.message_permission</code>. Булевый
     * флаг, указывающий, имеет ли учетная запись права на отправку сообщений
     */
    public void setMessagePermission(Boolean value) {
        set(12, value);
    }

    /**
     * Getter for <code>socialnet.account.message_permission</code>. Булевый
     * флаг, указывающий, имеет ли учетная запись права на отправку сообщений
     */
    public Boolean getMessagePermission() {
        return (Boolean) get(12);
    }

    /**
     * Setter for <code>socialnet.account.last_online_time</code>. Время, когда
     * последний раз владелец учетной записи был в сети
     */
    public void setLastOnlineTime(LocalDateTime value) {
        set(13, value);
    }

    /**
     * Getter for <code>socialnet.account.last_online_time</code>. Время, когда
     * последний раз владелец учетной записи был в сети
     */
    public LocalDateTime getLastOnlineTime() {
        return (LocalDateTime) get(13);
    }

    /**
     * Setter for <code>socialnet.account.is_online</code>. Булевый флаг,
     * указывающий, находится ли владелец учетной записи в сети
     */
    public void setIsOnline(Boolean value) {
        set(14, value);
    }

    /**
     * Getter for <code>socialnet.account.is_online</code>. Булевый флаг,
     * указывающий, находится ли владелец учетной записи в сети
     */
    public Boolean getIsOnline() {
        return (Boolean) get(14);
    }

    /**
     * Setter for <code>socialnet.account.is_blocked</code>. Булевый флаг,
     * указывающий, заблокирован ли аккаунт
     */
    public void setIsBlocked(Boolean value) {
        set(15, value);
    }

    /**
     * Getter for <code>socialnet.account.is_blocked</code>. Булевый флаг,
     * указывающий, заблокирован ли аккаунт
     */
    public Boolean getIsBlocked() {
        return (Boolean) get(15);
    }

    /**
     * Setter for <code>socialnet.account.created_on</code>. Время создания
     * учетной записи
     */
    public void setCreatedOn(LocalDateTime value) {
        set(16, value);
    }

    /**
     * Getter for <code>socialnet.account.created_on</code>. Время создания
     * учетной записи
     */
    public LocalDateTime getCreatedOn() {
        return (LocalDateTime) get(16);
    }

    /**
     * Setter for <code>socialnet.account.updated_on</code>. Время последнего
     * обновления учетной записи
     */
    public void setUpdatedOn(LocalDateTime value) {
        set(17, value);
    }

    /**
     * Getter for <code>socialnet.account.updated_on</code>. Время последнего
     * обновления учетной записи
     */
    public LocalDateTime getUpdatedOn() {
        return (LocalDateTime) get(17);
    }

    /**
     * Setter for <code>socialnet.account.id</code>. Уникальный идентификатор
     * аккаунта
     */
    public void setId(UUID value) {
        set(18, value);
    }

    /**
     * Getter for <code>socialnet.account.id</code>. Уникальный идентификатор
     * аккаунта
     */
    public UUID getId() {
        return (UUID) get(18);
    }

    /**
     * Setter for <code>socialnet.account.enable_like</code>. Разрешить события
     * с типом LIKE
     */
    public void setEnableLike(Boolean value) {
        set(19, value);
    }

    /**
     * Getter for <code>socialnet.account.enable_like</code>. Разрешить события
     * с типом LIKE
     */
    public Boolean getEnableLike() {
        return (Boolean) get(19);
    }

    /**
     * Setter for <code>socialnet.account.enable_post</code>. Разрешить события
     * с типом POST
     */
    public void setEnablePost(Boolean value) {
        set(20, value);
    }

    /**
     * Getter for <code>socialnet.account.enable_post</code>. Разрешить события
     * с типом POST
     */
    public Boolean getEnablePost() {
        return (Boolean) get(20);
    }

    /**
     * Setter for <code>socialnet.account.enable_post_comment</code>. Разрешить
     * события с типом POST_COMMENT
     */
    public void setEnablePostComment(Boolean value) {
        set(21, value);
    }

    /**
     * Getter for <code>socialnet.account.enable_post_comment</code>. Разрешить
     * события с типом POST_COMMENT
     */
    public Boolean getEnablePostComment() {
        return (Boolean) get(21);
    }

    /**
     * Setter for <code>socialnet.account.enable_comment_comment</code>.
     * Разрешить события с типом COMMENT_COMMENT
     */
    public void setEnableCommentComment(Boolean value) {
        set(22, value);
    }

    /**
     * Getter for <code>socialnet.account.enable_comment_comment</code>.
     * Разрешить события с типом COMMENT_COMMENT
     */
    public Boolean getEnableCommentComment() {
        return (Boolean) get(22);
    }

    /**
     * Setter for <code>socialnet.account.enable_message</code>. Разрешить
     * события с типом MESSAGE
     */
    public void setEnableMessage(Boolean value) {
        set(23, value);
    }

    /**
     * Getter for <code>socialnet.account.enable_message</code>. Разрешить
     * события с типом MESSAGE
     */
    public Boolean getEnableMessage() {
        return (Boolean) get(23);
    }

    /**
     * Setter for <code>socialnet.account.enable_friend_request</code>.
     * Разрешить события с типом FRIEND_REQUEST
     */
    public void setEnableFriendRequest(Boolean value) {
        set(24, value);
    }

    /**
     * Getter for <code>socialnet.account.enable_friend_request</code>.
     * Разрешить события с типом FRIEND_REQUEST
     */
    public Boolean getEnableFriendRequest() {
        return (Boolean) get(24);
    }

    /**
     * Setter for <code>socialnet.account.enable_friend_birthday</code>.
     * Разрешить события с типом FRIEND_BIRTHDAY
     */
    public void setEnableFriendBirthday(Boolean value) {
        set(25, value);
    }

    /**
     * Getter for <code>socialnet.account.enable_friend_birthday</code>.
     * Разрешить события с типом FRIEND_BIRTHDAY
     */
    public Boolean getEnableFriendBirthday() {
        return (Boolean) get(25);
    }

    /**
     * Setter for <code>socialnet.account.enable_send_email_message</code>.
     * Разрешить события с типом SEND_EMAIL_MESSAGE
     */
    public void setEnableSendEmailMessage(Boolean value) {
        set(26, value);
    }

    /**
     * Getter for <code>socialnet.account.enable_send_email_message</code>.
     * Разрешить события с типом SEND_EMAIL_MESSAGE
     */
    public Boolean getEnableSendEmailMessage() {
        return (Boolean) get(26);
    }

    /**
     * Setter for <code>socialnet.account.profile_cover</code>. Ссылка на фото
     * профайла владельца учетной записи
     */
    public void setProfileCover(String value) {
        set(27, value);
    }

    /**
     * Getter for <code>socialnet.account.profile_cover</code>. Ссылка на фото
     * профайла владельца учетной записи
     */
    public String getProfileCover() {
        return (String) get(27);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AccountRecord
     */
    public AccountRecord() {
        super(Account.ACCOUNT);
    }

    /**
     * Create a detached, initialised AccountRecord
     */
    public AccountRecord(Boolean isDeleted, String firstName, String lastName, String email, String password, String phone, String photo, String about, String city, String country, LocalDateTime regDate, LocalDate birthDate, Boolean messagePermission, LocalDateTime lastOnlineTime, Boolean isOnline, Boolean isBlocked, LocalDateTime createdOn, LocalDateTime updatedOn, UUID id, Boolean enableLike, Boolean enablePost, Boolean enablePostComment, Boolean enableCommentComment, Boolean enableMessage, Boolean enableFriendRequest, Boolean enableFriendBirthday, Boolean enableSendEmailMessage, String profileCover) {
        super(Account.ACCOUNT);

        setIsDeleted(isDeleted);
        setFirstName(firstName);
        setLastName(lastName);
        setEmail(email);
        setPassword(password);
        setPhone(phone);
        setPhoto(photo);
        setAbout(about);
        setCity(city);
        setCountry(country);
        setRegDate(regDate);
        setBirthDate(birthDate);
        setMessagePermission(messagePermission);
        setLastOnlineTime(lastOnlineTime);
        setIsOnline(isOnline);
        setIsBlocked(isBlocked);
        setCreatedOn(createdOn);
        setUpdatedOn(updatedOn);
        setId(id);
        setEnableLike(enableLike);
        setEnablePost(enablePost);
        setEnablePostComment(enablePostComment);
        setEnableCommentComment(enableCommentComment);
        setEnableMessage(enableMessage);
        setEnableFriendRequest(enableFriendRequest);
        setEnableFriendBirthday(enableFriendBirthday);
        setEnableSendEmailMessage(enableSendEmailMessage);
        setProfileCover(profileCover);
        resetChangedOnNotNull();
    }
}
