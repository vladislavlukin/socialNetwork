/*
 * This file is generated by jOOQ.
 */
package ru.team38.common.jooq.tables;


import java.time.LocalDateTime;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.team38.common.jooq.Keys;
import ru.team38.common.jooq.Socialnet;
import ru.team38.common.jooq.tables.records.LikeRecord;


/**
 * Таблица для хранения лайков
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Like extends TableImpl<LikeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>socialnet.like</code>
     */
    public static final Like LIKE = new Like();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LikeRecord> getRecordType() {
        return LikeRecord.class;
    }

    /**
     * The column <code>socialnet.like.id</code>. Уникальный идентификатор лайка
     */
    public final TableField<LikeRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "Уникальный идентификатор лайка");

    /**
     * The column <code>socialnet.like.is_deleted</code>. Флаг, указывающий,
     * удален ли лайк
     */
    public final TableField<LikeRecord, Boolean> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.BOOLEAN.nullable(false), this, "Флаг, указывающий, удален ли лайк");

    /**
     * The column <code>socialnet.like.time</code>. Время записи лайка
     */
    public final TableField<LikeRecord, LocalDateTime> TIME = createField(DSL.name("time"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "Время записи лайка");

    /**
     * The column <code>socialnet.like.author_id</code>. ID аккаунта автора
     * лайка
     */
    public final TableField<LikeRecord, UUID> AUTHOR_ID = createField(DSL.name("author_id"), SQLDataType.UUID.nullable(false), this, "ID аккаунта автора лайка");

    /**
     * The column <code>socialnet.like.item_id</code>. ID поста или комментария
     * лайка
     */
    public final TableField<LikeRecord, UUID> ITEM_ID = createField(DSL.name("item_id"), SQLDataType.UUID.nullable(false), this, "ID поста или комментария лайка");

    /**
     * The column <code>socialnet.like.reaction_type</code>. Реакция
     */
    public final TableField<LikeRecord, String> REACTION_TYPE = createField(DSL.name("reaction_type"), SQLDataType.CLOB, this, "Реакция");

    /**
     * The column <code>socialnet.like.type</code>. Тип лайка: POST, COMMENT
     */
    public final TableField<LikeRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CLOB.nullable(false), this, "Тип лайка: POST, COMMENT");

    private Like(Name alias, Table<LikeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Like(Name alias, Table<LikeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Таблица для хранения лайков"), TableOptions.table());
    }

    /**
     * Create an aliased <code>socialnet.like</code> table reference
     */
    public Like(String alias) {
        this(DSL.name(alias), LIKE);
    }

    /**
     * Create an aliased <code>socialnet.like</code> table reference
     */
    public Like(Name alias) {
        this(alias, LIKE);
    }

    /**
     * Create a <code>socialnet.like</code> table reference
     */
    public Like() {
        this(DSL.name("like"), null);
    }

    public <O extends Record> Like(Table<O> child, ForeignKey<O, LikeRecord> key) {
        super(child, key, LIKE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Socialnet.SOCIALNET;
    }

    @Override
    public UniqueKey<LikeRecord> getPrimaryKey() {
        return Keys.LIKE_PKEY;
    }

    @Override
    public Like as(String alias) {
        return new Like(DSL.name(alias), this);
    }

    @Override
    public Like as(Name alias) {
        return new Like(alias, this);
    }

    @Override
    public Like as(Table<?> alias) {
        return new Like(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Like rename(String name) {
        return new Like(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Like rename(Name name) {
        return new Like(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Like rename(Table<?> name) {
        return new Like(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, Boolean, LocalDateTime, UUID, UUID, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super UUID, ? super Boolean, ? super LocalDateTime, ? super UUID, ? super UUID, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super UUID, ? super Boolean, ? super LocalDateTime, ? super UUID, ? super UUID, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
