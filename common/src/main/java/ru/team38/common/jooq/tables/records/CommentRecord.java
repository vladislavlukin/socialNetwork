/*
 * This file is generated by jOOQ.
 */
package ru.team38.common.jooq.tables.records;


import java.time.OffsetDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record14;
import org.jooq.Row14;
import org.jooq.impl.UpdatableRecordImpl;

import ru.team38.common.jooq.tables.Comment;


/**
 * Таблица сущностей комментариев
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommentRecord extends UpdatableRecordImpl<CommentRecord> implements Record14<UUID, Boolean, String, OffsetDateTime, OffsetDateTime, UUID, UUID, String, UUID, Boolean, Integer, Boolean, Integer, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>socialnet.comment.id</code>. Идентификатор комментария
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>socialnet.comment.id</code>. Идентификатор комментария
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>socialnet.comment.is_deleted</code>. Удален ли
     * комментарий
     */
    public void setIsDeleted(Boolean value) {
        set(1, value);
    }

    /**
     * Getter for <code>socialnet.comment.is_deleted</code>. Удален ли
     * комментарий
     */
    public Boolean getIsDeleted() {
        return (Boolean) get(1);
    }

    /**
     * Setter for <code>socialnet.comment.comment_type</code>. Тип комментария
     * (к посту - POST, к комментарию - COMMENT
     */
    public void setCommentType(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>socialnet.comment.comment_type</code>. Тип комментария
     * (к посту - POST, к комментарию - COMMENT
     */
    public String getCommentType() {
        return (String) get(2);
    }

    /**
     * Setter for <code>socialnet.comment.time</code>. Время создания
     * комментария
     */
    public void setTime(OffsetDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>socialnet.comment.time</code>. Время создания
     * комментария
     */
    public OffsetDateTime getTime() {
        return (OffsetDateTime) get(3);
    }

    /**
     * Setter for <code>socialnet.comment.time_changed</code>. Время последней
     * правки комментария
     */
    public void setTimeChanged(OffsetDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>socialnet.comment.time_changed</code>. Время последней
     * правки комментария
     */
    public OffsetDateTime getTimeChanged() {
        return (OffsetDateTime) get(4);
    }

    /**
     * Setter for <code>socialnet.comment.author_id</code>. Идентификатор автора
     * комментария
     */
    public void setAuthorId(UUID value) {
        set(5, value);
    }

    /**
     * Getter for <code>socialnet.comment.author_id</code>. Идентификатор автора
     * комментария
     */
    public UUID getAuthorId() {
        return (UUID) get(5);
    }

    /**
     * Setter for <code>socialnet.comment.parent_id</code>. Идентификатор
     * родительского комментария
     */
    public void setParentId(UUID value) {
        set(6, value);
    }

    /**
     * Getter for <code>socialnet.comment.parent_id</code>. Идентификатор
     * родительского комментария
     */
    public UUID getParentId() {
        return (UUID) get(6);
    }

    /**
     * Setter for <code>socialnet.comment.comment_text</code>. Тело комментария
     */
    public void setCommentText(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>socialnet.comment.comment_text</code>. Тело комментария
     */
    public String getCommentText() {
        return (String) get(7);
    }

    /**
     * Setter for <code>socialnet.comment.post_id</code>. Идентификатор поста, с
     * которым связан комментарий
     */
    public void setPostId(UUID value) {
        set(8, value);
    }

    /**
     * Getter for <code>socialnet.comment.post_id</code>. Идентификатор поста, с
     * которым связан комментарий
     */
    public UUID getPostId() {
        return (UUID) get(8);
    }

    /**
     * Setter for <code>socialnet.comment.is_blocked</code>. Скрыт/заблокирован
     * ли комментарий
     */
    public void setIsBlocked(Boolean value) {
        set(9, value);
    }

    /**
     * Getter for <code>socialnet.comment.is_blocked</code>. Скрыт/заблокирован
     * ли комментарий
     */
    public Boolean getIsBlocked() {
        return (Boolean) get(9);
    }

    /**
     * Setter for <code>socialnet.comment.like_amount</code>. Количество лайков
     * к комментарию
     */
    public void setLikeAmount(Integer value) {
        set(10, value);
    }

    /**
     * Getter for <code>socialnet.comment.like_amount</code>. Количество лайков
     * к комментарию
     */
    public Integer getLikeAmount() {
        return (Integer) get(10);
    }

    /**
     * Setter for <code>socialnet.comment.my_like</code>. Лайкнут ли комментарий
     * пользователем - инициатором вызова соответствующего метода
     */
    public void setMyLike(Boolean value) {
        set(11, value);
    }

    /**
     * Getter for <code>socialnet.comment.my_like</code>. Лайкнут ли комментарий
     * пользователем - инициатором вызова соответствующего метода
     */
    public Boolean getMyLike() {
        return (Boolean) get(11);
    }

    /**
     * Setter for <code>socialnet.comment.comments_count</code>. Количество
     * комментариев к настоящему комментарию
     */
    public void setCommentsCount(Integer value) {
        set(12, value);
    }

    /**
     * Getter for <code>socialnet.comment.comments_count</code>. Количество
     * комментариев к настоящему комментарию
     */
    public Integer getCommentsCount() {
        return (Integer) get(12);
    }

    /**
     * Setter for <code>socialnet.comment.image_path</code>. Путь к изображению
     * к комментарию
     */
    public void setImagePath(String value) {
        set(13, value);
    }

    /**
     * Getter for <code>socialnet.comment.image_path</code>. Путь к изображению
     * к комментарию
     */
    public String getImagePath() {
        return (String) get(13);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record14 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row14<UUID, Boolean, String, OffsetDateTime, OffsetDateTime, UUID, UUID, String, UUID, Boolean, Integer, Boolean, Integer, String> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    @Override
    public Row14<UUID, Boolean, String, OffsetDateTime, OffsetDateTime, UUID, UUID, String, UUID, Boolean, Integer, Boolean, Integer, String> valuesRow() {
        return (Row14) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Comment.COMMENT.ID;
    }

    @Override
    public Field<Boolean> field2() {
        return Comment.COMMENT.IS_DELETED;
    }

    @Override
    public Field<String> field3() {
        return Comment.COMMENT.COMMENT_TYPE;
    }

    @Override
    public Field<OffsetDateTime> field4() {
        return Comment.COMMENT.TIME;
    }

    @Override
    public Field<OffsetDateTime> field5() {
        return Comment.COMMENT.TIME_CHANGED;
    }

    @Override
    public Field<UUID> field6() {
        return Comment.COMMENT.AUTHOR_ID;
    }

    @Override
    public Field<UUID> field7() {
        return Comment.COMMENT.PARENT_ID;
    }

    @Override
    public Field<String> field8() {
        return Comment.COMMENT.COMMENT_TEXT;
    }

    @Override
    public Field<UUID> field9() {
        return Comment.COMMENT.POST_ID;
    }

    @Override
    public Field<Boolean> field10() {
        return Comment.COMMENT.IS_BLOCKED;
    }

    @Override
    public Field<Integer> field11() {
        return Comment.COMMENT.LIKE_AMOUNT;
    }

    @Override
    public Field<Boolean> field12() {
        return Comment.COMMENT.MY_LIKE;
    }

    @Override
    public Field<Integer> field13() {
        return Comment.COMMENT.COMMENTS_COUNT;
    }

    @Override
    public Field<String> field14() {
        return Comment.COMMENT.IMAGE_PATH;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public Boolean component2() {
        return getIsDeleted();
    }

    @Override
    public String component3() {
        return getCommentType();
    }

    @Override
    public OffsetDateTime component4() {
        return getTime();
    }

    @Override
    public OffsetDateTime component5() {
        return getTimeChanged();
    }

    @Override
    public UUID component6() {
        return getAuthorId();
    }

    @Override
    public UUID component7() {
        return getParentId();
    }

    @Override
    public String component8() {
        return getCommentText();
    }

    @Override
    public UUID component9() {
        return getPostId();
    }

    @Override
    public Boolean component10() {
        return getIsBlocked();
    }

    @Override
    public Integer component11() {
        return getLikeAmount();
    }

    @Override
    public Boolean component12() {
        return getMyLike();
    }

    @Override
    public Integer component13() {
        return getCommentsCount();
    }

    @Override
    public String component14() {
        return getImagePath();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public Boolean value2() {
        return getIsDeleted();
    }

    @Override
    public String value3() {
        return getCommentType();
    }

    @Override
    public OffsetDateTime value4() {
        return getTime();
    }

    @Override
    public OffsetDateTime value5() {
        return getTimeChanged();
    }

    @Override
    public UUID value6() {
        return getAuthorId();
    }

    @Override
    public UUID value7() {
        return getParentId();
    }

    @Override
    public String value8() {
        return getCommentText();
    }

    @Override
    public UUID value9() {
        return getPostId();
    }

    @Override
    public Boolean value10() {
        return getIsBlocked();
    }

    @Override
    public Integer value11() {
        return getLikeAmount();
    }

    @Override
    public Boolean value12() {
        return getMyLike();
    }

    @Override
    public Integer value13() {
        return getCommentsCount();
    }

    @Override
    public String value14() {
        return getImagePath();
    }

    @Override
    public CommentRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public CommentRecord value2(Boolean value) {
        setIsDeleted(value);
        return this;
    }

    @Override
    public CommentRecord value3(String value) {
        setCommentType(value);
        return this;
    }

    @Override
    public CommentRecord value4(OffsetDateTime value) {
        setTime(value);
        return this;
    }

    @Override
    public CommentRecord value5(OffsetDateTime value) {
        setTimeChanged(value);
        return this;
    }

    @Override
    public CommentRecord value6(UUID value) {
        setAuthorId(value);
        return this;
    }

    @Override
    public CommentRecord value7(UUID value) {
        setParentId(value);
        return this;
    }

    @Override
    public CommentRecord value8(String value) {
        setCommentText(value);
        return this;
    }

    @Override
    public CommentRecord value9(UUID value) {
        setPostId(value);
        return this;
    }

    @Override
    public CommentRecord value10(Boolean value) {
        setIsBlocked(value);
        return this;
    }

    @Override
    public CommentRecord value11(Integer value) {
        setLikeAmount(value);
        return this;
    }

    @Override
    public CommentRecord value12(Boolean value) {
        setMyLike(value);
        return this;
    }

    @Override
    public CommentRecord value13(Integer value) {
        setCommentsCount(value);
        return this;
    }

    @Override
    public CommentRecord value14(String value) {
        setImagePath(value);
        return this;
    }

    @Override
    public CommentRecord values(UUID value1, Boolean value2, String value3, OffsetDateTime value4, OffsetDateTime value5, UUID value6, UUID value7, String value8, UUID value9, Boolean value10, Integer value11, Boolean value12, Integer value13, String value14) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CommentRecord
     */
    public CommentRecord() {
        super(Comment.COMMENT);
    }

    /**
     * Create a detached, initialised CommentRecord
     */
    public CommentRecord(UUID id, Boolean isDeleted, String commentType, OffsetDateTime time, OffsetDateTime timeChanged, UUID authorId, UUID parentId, String commentText, UUID postId, Boolean isBlocked, Integer likeAmount, Boolean myLike, Integer commentsCount, String imagePath) {
        super(Comment.COMMENT);

        setId(id);
        setIsDeleted(isDeleted);
        setCommentType(commentType);
        setTime(time);
        setTimeChanged(timeChanged);
        setAuthorId(authorId);
        setParentId(parentId);
        setCommentText(commentText);
        setPostId(postId);
        setIsBlocked(isBlocked);
        setLikeAmount(likeAmount);
        setMyLike(myLike);
        setCommentsCount(commentsCount);
        setImagePath(imagePath);
        resetChangedOnNotNull();
    }
}
