/*
 * This file is generated by jOOQ.
 */
package ru.team38.common.jooq.tables;


import java.time.LocalDateTime;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function17;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.team38.common.jooq.Keys;
import ru.team38.common.jooq.Socialnet;
import ru.team38.common.jooq.tables.records.PostRecord;


/**
 * Таблица для хранения информации о журнале изменений
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Post extends TableImpl<PostRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>socialnet.post</code>
     */
    public static final Post POST = new Post();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PostRecord> getRecordType() {
        return PostRecord.class;
    }

    /**
     * The column <code>socialnet.post.is_deleted</code>. Флаг, указывающий,
     * удалена ли запись журнала изменений
     */
    public final TableField<PostRecord, Boolean> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.BOOLEAN.nullable(false), this, "Флаг, указывающий, удалена ли запись журнала изменений");

    /**
     * The column <code>socialnet.post.time</code>. Время записи журнала
     * изменений
     */
    public final TableField<PostRecord, LocalDateTime> TIME = createField(DSL.name("time"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "Время записи журнала изменений");

    /**
     * The column <code>socialnet.post.time_changed</code>. Время последнего
     * изменения записи журнала изменений
     */
    public final TableField<PostRecord, LocalDateTime> TIME_CHANGED = createField(DSL.name("time_changed"), SQLDataType.LOCALDATETIME(6), this, "Время последнего изменения записи журнала изменений");

    /**
     * The column <code>socialnet.post.author_id</code>. Идентификатор автора
     * записи журнала изменений
     */
    public final TableField<PostRecord, UUID> AUTHOR_ID = createField(DSL.name("author_id"), SQLDataType.UUID.nullable(false), this, "Идентификатор автора записи журнала изменений");

    /**
     * The column <code>socialnet.post.title</code>. Заголовок записи журнала
     * изменений
     */
    public final TableField<PostRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.CLOB.nullable(false), this, "Заголовок записи журнала изменений");

    /**
     * The column <code>socialnet.post.type</code>. Тип поста: POSTED, QUEUED -
     * опубликован, поставлен в очередь (для отложенной публикации)
     */
    public final TableField<PostRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CLOB.nullable(false), this, "Тип поста: POSTED, QUEUED - опубликован, поставлен в очередь (для отложенной публикации)");

    /**
     * The column <code>socialnet.post.post_text</code>. Текст записи журнала
     * изменений
     */
    public final TableField<PostRecord, String> POST_TEXT = createField(DSL.name("post_text"), SQLDataType.CLOB, this, "Текст записи журнала изменений");

    /**
     * The column <code>socialnet.post.is_blocked</code>. Флаг, указывающий,
     * заблокирована ли запись журнала изменений
     */
    public final TableField<PostRecord, Boolean> IS_BLOCKED = createField(DSL.name("is_blocked"), SQLDataType.BOOLEAN.nullable(false), this, "Флаг, указывающий, заблокирована ли запись журнала изменений");

    /**
     * The column <code>socialnet.post.comments_count</code>. Количество
     * комментариев к записи журнала изменений
     */
    public final TableField<PostRecord, Integer> COMMENTS_COUNT = createField(DSL.name("comments_count"), SQLDataType.INTEGER, this, "Количество комментариев к записи журнала изменений");

    /**
     * The column <code>socialnet.post.tags</code>. Теги, связанные с записью
     * журнала изменений
     */
    public final TableField<PostRecord, String[]> TAGS = createField(DSL.name("tags"), SQLDataType.CLOB.array(), this, "Теги, связанные с записью журнала изменений");

    /**
     * The column <code>socialnet.post.like_amount</code>. Количество лайков к
     * записи журнала изменений
     */
    public final TableField<PostRecord, Integer> LIKE_AMOUNT = createField(DSL.name("like_amount"), SQLDataType.INTEGER, this, "Количество лайков к записи журнала изменений");

    /**
     * The column <code>socialnet.post.my_like</code>. Флаг, указывающий,
     * поставил ли текущий пользователь лайк к записи журнала изменений
     */
    public final TableField<PostRecord, Boolean> MY_LIKE = createField(DSL.name("my_like"), SQLDataType.BOOLEAN, this, "Флаг, указывающий, поставил ли текущий пользователь лайк к записи журнала изменений");

    /**
     * The column <code>socialnet.post.image_path</code>. Путь к изображению,
     * связанному с запис
     */
    public final TableField<PostRecord, String> IMAGE_PATH = createField(DSL.name("image_path"), SQLDataType.CLOB, this, "Путь к изображению, связанному с запис");

    /**
     * The column <code>socialnet.post.publish_date</code>. Время публикации
     * поста
     */
    public final TableField<PostRecord, LocalDateTime> PUBLISH_DATE = createField(DSL.name("publish_date"), SQLDataType.LOCALDATETIME(6), this, "Время публикации поста");

    /**
     * The column <code>socialnet.post.id</code>. Уникальный идентификатор поста
     */
    public final TableField<PostRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "Уникальный идентификатор поста");

    /**
     * The column <code>socialnet.post.reactions</code>.
     */
    public final TableField<PostRecord, String[]> REACTIONS = createField(DSL.name("reactions"), SQLDataType.CLOB.array(), this, "");

    /**
     * The column <code>socialnet.post.my_reaction</code>.
     */
    public final TableField<PostRecord, String> MY_REACTION = createField(DSL.name("my_reaction"), SQLDataType.CLOB, this, "");

    private Post(Name alias, Table<PostRecord> aliased) {
        this(alias, aliased, null);
    }

    private Post(Name alias, Table<PostRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Таблица для хранения информации о журнале изменений"), TableOptions.table());
    }

    /**
     * Create an aliased <code>socialnet.post</code> table reference
     */
    public Post(String alias) {
        this(DSL.name(alias), POST);
    }

    /**
     * Create an aliased <code>socialnet.post</code> table reference
     */
    public Post(Name alias) {
        this(alias, POST);
    }

    /**
     * Create a <code>socialnet.post</code> table reference
     */
    public Post() {
        this(DSL.name("post"), null);
    }

    public <O extends Record> Post(Table<O> child, ForeignKey<O, PostRecord> key) {
        super(child, key, POST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Socialnet.SOCIALNET;
    }

    @Override
    public UniqueKey<PostRecord> getPrimaryKey() {
        return Keys.POST_PKEY;
    }

    @Override
    public Post as(String alias) {
        return new Post(DSL.name(alias), this);
    }

    @Override
    public Post as(Name alias) {
        return new Post(alias, this);
    }

    @Override
    public Post as(Table<?> alias) {
        return new Post(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Post rename(String name) {
        return new Post(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Post rename(Name name) {
        return new Post(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Post rename(Table<?> name) {
        return new Post(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<Boolean, LocalDateTime, LocalDateTime, UUID, String, String, String, Boolean, Integer, String[], Integer, Boolean, String, LocalDateTime, UUID, String[], String> fieldsRow() {
        return (Row17) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function17<? super Boolean, ? super LocalDateTime, ? super LocalDateTime, ? super UUID, ? super String, ? super String, ? super String, ? super Boolean, ? super Integer, ? super String[], ? super Integer, ? super Boolean, ? super String, ? super LocalDateTime, ? super UUID, ? super String[], ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function17<? super Boolean, ? super LocalDateTime, ? super LocalDateTime, ? super UUID, ? super String, ? super String, ? super String, ? super Boolean, ? super Integer, ? super String[], ? super Integer, ? super Boolean, ? super String, ? super LocalDateTime, ? super UUID, ? super String[], ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
