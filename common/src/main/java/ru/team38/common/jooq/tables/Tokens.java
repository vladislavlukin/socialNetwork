/*
 * This file is generated by jOOQ.
 */
package ru.team38.common.jooq.tables;


import java.time.LocalDateTime;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.team38.common.jooq.Keys;
import ru.team38.common.jooq.Socialnet;
import ru.team38.common.jooq.tables.records.TokensRecord;


/**
 * Таблица для хранения токенов
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tokens extends TableImpl<TokensRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>socialnet.tokens</code>
     */
    public static final Tokens TOKENS = new Tokens();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TokensRecord> getRecordType() {
        return TokensRecord.class;
    }

    /**
     * The column <code>socialnet.tokens.id</code>. Уникальный идентификатор
     * токена
     */
    public final TableField<TokensRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "Уникальный идентификатор токена");

    /**
     * The column <code>socialnet.tokens.account_id</code>. Уникальный
     * идентификатор аккаунта пользователя
     */
    public final TableField<TokensRecord, UUID> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.UUID.nullable(false), this, "Уникальный идентификатор аккаунта пользователя");

    /**
     * The column <code>socialnet.tokens.token_type</code>. Тип токена (access
     * или refresh)
     */
    public final TableField<TokensRecord, String> TOKEN_TYPE = createField(DSL.name("token_type"), SQLDataType.CLOB.nullable(false), this, "Тип токена (access или refresh)");

    /**
     * The column <code>socialnet.tokens.token</code>. Закодированный токен
     */
    public final TableField<TokensRecord, String> TOKEN = createField(DSL.name("token"), SQLDataType.CLOB.nullable(false), this, "Закодированный токен");

    /**
     * The column <code>socialnet.tokens.validity</code>. Валиден ли токен
     */
    public final TableField<TokensRecord, Boolean> VALIDITY = createField(DSL.name("validity"), SQLDataType.BOOLEAN.nullable(false), this, "Валиден ли токен");

    /**
     * The column <code>socialnet.tokens.expiration</code>. Дата истечения срока
     * годности токена
     */
    public final TableField<TokensRecord, LocalDateTime> EXPIRATION = createField(DSL.name("expiration"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "Дата истечения срока годности токена");

    /**
     * The column <code>socialnet.tokens.device_uuid</code>. Идентификатор,
     * объединяющий refresh токен с соответствующими access токенами
     */
    public final TableField<TokensRecord, String> DEVICE_UUID = createField(DSL.name("device_uuid"), SQLDataType.CLOB.nullable(false), this, "Идентификатор, объединяющий refresh токен с соответствующими access токенами");

    private Tokens(Name alias, Table<TokensRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tokens(Name alias, Table<TokensRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Таблица для хранения токенов"), TableOptions.table());
    }

    /**
     * Create an aliased <code>socialnet.tokens</code> table reference
     */
    public Tokens(String alias) {
        this(DSL.name(alias), TOKENS);
    }

    /**
     * Create an aliased <code>socialnet.tokens</code> table reference
     */
    public Tokens(Name alias) {
        this(alias, TOKENS);
    }

    /**
     * Create a <code>socialnet.tokens</code> table reference
     */
    public Tokens() {
        this(DSL.name("tokens"), null);
    }

    public <O extends Record> Tokens(Table<O> child, ForeignKey<O, TokensRecord> key) {
        super(child, key, TOKENS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Socialnet.SOCIALNET;
    }

    @Override
    public Identity<TokensRecord, Long> getIdentity() {
        return (Identity<TokensRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TokensRecord> getPrimaryKey() {
        return Keys.TOKENS_PKEY;
    }

    @Override
    public Tokens as(String alias) {
        return new Tokens(DSL.name(alias), this);
    }

    @Override
    public Tokens as(Name alias) {
        return new Tokens(alias, this);
    }

    @Override
    public Tokens as(Table<?> alias) {
        return new Tokens(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tokens rename(String name) {
        return new Tokens(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tokens rename(Name name) {
        return new Tokens(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tokens rename(Table<?> name) {
        return new Tokens(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, UUID, String, String, Boolean, LocalDateTime, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super UUID, ? super String, ? super String, ? super Boolean, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super UUID, ? super String, ? super String, ? super Boolean, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
