/*
 * This file is generated by jOOQ.
 */
package ru.team38.common.jooq.tables.records;


import java.time.LocalDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;

import ru.team38.common.jooq.tables.Like;


/**
 * Таблица для хранения лайков
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LikeRecord extends UpdatableRecordImpl<LikeRecord> implements Record7<UUID, Boolean, LocalDateTime, UUID, UUID, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>socialnet.like.id</code>. Уникальный идентификатор лайка
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>socialnet.like.id</code>. Уникальный идентификатор лайка
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>socialnet.like.is_deleted</code>. Флаг, указывающий,
     * удален ли лайк
     */
    public void setIsDeleted(Boolean value) {
        set(1, value);
    }

    /**
     * Getter for <code>socialnet.like.is_deleted</code>. Флаг, указывающий,
     * удален ли лайк
     */
    public Boolean getIsDeleted() {
        return (Boolean) get(1);
    }

    /**
     * Setter for <code>socialnet.like.time</code>. Время записи лайка
     */
    public void setTime(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>socialnet.like.time</code>. Время записи лайка
     */
    public LocalDateTime getTime() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>socialnet.like.author_id</code>. ID аккаунта автора
     * лайка
     */
    public void setAuthorId(UUID value) {
        set(3, value);
    }

    /**
     * Getter for <code>socialnet.like.author_id</code>. ID аккаунта автора
     * лайка
     */
    public UUID getAuthorId() {
        return (UUID) get(3);
    }

    /**
     * Setter for <code>socialnet.like.item_id</code>. ID поста или комментария
     * лайка
     */
    public void setItemId(UUID value) {
        set(4, value);
    }

    /**
     * Getter for <code>socialnet.like.item_id</code>. ID поста или комментария
     * лайка
     */
    public UUID getItemId() {
        return (UUID) get(4);
    }

    /**
     * Setter for <code>socialnet.like.reaction_type</code>. Реакция
     */
    public void setReactionType(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>socialnet.like.reaction_type</code>. Реакция
     */
    public String getReactionType() {
        return (String) get(5);
    }

    /**
     * Setter for <code>socialnet.like.type</code>. Тип лайка: POST, COMMENT
     */
    public void setType(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>socialnet.like.type</code>. Тип лайка: POST, COMMENT
     */
    public String getType() {
        return (String) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, Boolean, LocalDateTime, UUID, UUID, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<UUID, Boolean, LocalDateTime, UUID, UUID, String, String> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Like.LIKE.ID;
    }

    @Override
    public Field<Boolean> field2() {
        return Like.LIKE.IS_DELETED;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return Like.LIKE.TIME;
    }

    @Override
    public Field<UUID> field4() {
        return Like.LIKE.AUTHOR_ID;
    }

    @Override
    public Field<UUID> field5() {
        return Like.LIKE.ITEM_ID;
    }

    @Override
    public Field<String> field6() {
        return Like.LIKE.REACTION_TYPE;
    }

    @Override
    public Field<String> field7() {
        return Like.LIKE.TYPE;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public Boolean component2() {
        return getIsDeleted();
    }

    @Override
    public LocalDateTime component3() {
        return getTime();
    }

    @Override
    public UUID component4() {
        return getAuthorId();
    }

    @Override
    public UUID component5() {
        return getItemId();
    }

    @Override
    public String component6() {
        return getReactionType();
    }

    @Override
    public String component7() {
        return getType();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public Boolean value2() {
        return getIsDeleted();
    }

    @Override
    public LocalDateTime value3() {
        return getTime();
    }

    @Override
    public UUID value4() {
        return getAuthorId();
    }

    @Override
    public UUID value5() {
        return getItemId();
    }

    @Override
    public String value6() {
        return getReactionType();
    }

    @Override
    public String value7() {
        return getType();
    }

    @Override
    public LikeRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public LikeRecord value2(Boolean value) {
        setIsDeleted(value);
        return this;
    }

    @Override
    public LikeRecord value3(LocalDateTime value) {
        setTime(value);
        return this;
    }

    @Override
    public LikeRecord value4(UUID value) {
        setAuthorId(value);
        return this;
    }

    @Override
    public LikeRecord value5(UUID value) {
        setItemId(value);
        return this;
    }

    @Override
    public LikeRecord value6(String value) {
        setReactionType(value);
        return this;
    }

    @Override
    public LikeRecord value7(String value) {
        setType(value);
        return this;
    }

    @Override
    public LikeRecord values(UUID value1, Boolean value2, LocalDateTime value3, UUID value4, UUID value5, String value6, String value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached LikeRecord
     */
    public LikeRecord() {
        super(Like.LIKE);
    }

    /**
     * Create a detached, initialised LikeRecord
     */
    public LikeRecord(UUID id, Boolean isDeleted, LocalDateTime time, UUID authorId, UUID itemId, String reactionType, String type) {
        super(Like.LIKE);

        setId(id);
        setIsDeleted(isDeleted);
        setTime(time);
        setAuthorId(authorId);
        setItemId(itemId);
        setReactionType(reactionType);
        setType(type);
        resetChangedOnNotNull();
    }
}
