/*
 * This file is generated by jOOQ.
 */
package ru.team38.common.jooq.tables.records;


import java.time.LocalDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record17;
import org.jooq.Row17;
import org.jooq.impl.UpdatableRecordImpl;

import ru.team38.common.jooq.tables.Post;


/**
 * Таблица для хранения информации о журнале изменений
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PostRecord extends UpdatableRecordImpl<PostRecord> implements Record17<Boolean, LocalDateTime, LocalDateTime, UUID, String, String, String, Boolean, Integer, String[], Integer, Boolean, String, LocalDateTime, UUID, String[], String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>socialnet.post.is_deleted</code>. Флаг, указывающий,
     * удалена ли запись журнала изменений
     */
    public void setIsDeleted(Boolean value) {
        set(0, value);
    }

    /**
     * Getter for <code>socialnet.post.is_deleted</code>. Флаг, указывающий,
     * удалена ли запись журнала изменений
     */
    public Boolean getIsDeleted() {
        return (Boolean) get(0);
    }

    /**
     * Setter for <code>socialnet.post.time</code>. Время записи журнала
     * изменений
     */
    public void setTime(LocalDateTime value) {
        set(1, value);
    }

    /**
     * Getter for <code>socialnet.post.time</code>. Время записи журнала
     * изменений
     */
    public LocalDateTime getTime() {
        return (LocalDateTime) get(1);
    }

    /**
     * Setter for <code>socialnet.post.time_changed</code>. Время последнего
     * изменения записи журнала изменений
     */
    public void setTimeChanged(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>socialnet.post.time_changed</code>. Время последнего
     * изменения записи журнала изменений
     */
    public LocalDateTime getTimeChanged() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>socialnet.post.author_id</code>. Идентификатор автора
     * записи журнала изменений
     */
    public void setAuthorId(UUID value) {
        set(3, value);
    }

    /**
     * Getter for <code>socialnet.post.author_id</code>. Идентификатор автора
     * записи журнала изменений
     */
    public UUID getAuthorId() {
        return (UUID) get(3);
    }

    /**
     * Setter for <code>socialnet.post.title</code>. Заголовок записи журнала
     * изменений
     */
    public void setTitle(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>socialnet.post.title</code>. Заголовок записи журнала
     * изменений
     */
    public String getTitle() {
        return (String) get(4);
    }

    /**
     * Setter for <code>socialnet.post.type</code>. Тип поста: POSTED, QUEUED -
     * опубликован, поставлен в очередь (для отложенной публикации)
     */
    public void setType(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>socialnet.post.type</code>. Тип поста: POSTED, QUEUED -
     * опубликован, поставлен в очередь (для отложенной публикации)
     */
    public String getType() {
        return (String) get(5);
    }

    /**
     * Setter for <code>socialnet.post.post_text</code>. Текст записи журнала
     * изменений
     */
    public void setPostText(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>socialnet.post.post_text</code>. Текст записи журнала
     * изменений
     */
    public String getPostText() {
        return (String) get(6);
    }

    /**
     * Setter for <code>socialnet.post.is_blocked</code>. Флаг, указывающий,
     * заблокирована ли запись журнала изменений
     */
    public void setIsBlocked(Boolean value) {
        set(7, value);
    }

    /**
     * Getter for <code>socialnet.post.is_blocked</code>. Флаг, указывающий,
     * заблокирована ли запись журнала изменений
     */
    public Boolean getIsBlocked() {
        return (Boolean) get(7);
    }

    /**
     * Setter for <code>socialnet.post.comments_count</code>. Количество
     * комментариев к записи журнала изменений
     */
    public void setCommentsCount(Integer value) {
        set(8, value);
    }

    /**
     * Getter for <code>socialnet.post.comments_count</code>. Количество
     * комментариев к записи журнала изменений
     */
    public Integer getCommentsCount() {
        return (Integer) get(8);
    }

    /**
     * Setter for <code>socialnet.post.tags</code>. Теги, связанные с записью
     * журнала изменений
     */
    public void setTags(String[] value) {
        set(9, value);
    }

    /**
     * Getter for <code>socialnet.post.tags</code>. Теги, связанные с записью
     * журнала изменений
     */
    public String[] getTags() {
        return (String[]) get(9);
    }

    /**
     * Setter for <code>socialnet.post.like_amount</code>. Количество лайков к
     * записи журнала изменений
     */
    public void setLikeAmount(Integer value) {
        set(10, value);
    }

    /**
     * Getter for <code>socialnet.post.like_amount</code>. Количество лайков к
     * записи журнала изменений
     */
    public Integer getLikeAmount() {
        return (Integer) get(10);
    }

    /**
     * Setter for <code>socialnet.post.my_like</code>. Флаг, указывающий,
     * поставил ли текущий пользователь лайк к записи журнала изменений
     */
    public void setMyLike(Boolean value) {
        set(11, value);
    }

    /**
     * Getter for <code>socialnet.post.my_like</code>. Флаг, указывающий,
     * поставил ли текущий пользователь лайк к записи журнала изменений
     */
    public Boolean getMyLike() {
        return (Boolean) get(11);
    }

    /**
     * Setter for <code>socialnet.post.image_path</code>. Путь к изображению,
     * связанному с запис
     */
    public void setImagePath(String value) {
        set(12, value);
    }

    /**
     * Getter for <code>socialnet.post.image_path</code>. Путь к изображению,
     * связанному с запис
     */
    public String getImagePath() {
        return (String) get(12);
    }

    /**
     * Setter for <code>socialnet.post.publish_date</code>. Время публикации
     * поста
     */
    public void setPublishDate(LocalDateTime value) {
        set(13, value);
    }

    /**
     * Getter for <code>socialnet.post.publish_date</code>. Время публикации
     * поста
     */
    public LocalDateTime getPublishDate() {
        return (LocalDateTime) get(13);
    }

    /**
     * Setter for <code>socialnet.post.id</code>. Уникальный идентификатор поста
     */
    public void setId(UUID value) {
        set(14, value);
    }

    /**
     * Getter for <code>socialnet.post.id</code>. Уникальный идентификатор поста
     */
    public UUID getId() {
        return (UUID) get(14);
    }

    /**
     * Setter for <code>socialnet.post.reactions</code>.
     */
    public void setReactions(String[] value) {
        set(15, value);
    }

    /**
     * Getter for <code>socialnet.post.reactions</code>.
     */
    public String[] getReactions() {
        return (String[]) get(15);
    }

    /**
     * Setter for <code>socialnet.post.my_reaction</code>.
     */
    public void setMyReaction(String value) {
        set(16, value);
    }

    /**
     * Getter for <code>socialnet.post.my_reaction</code>.
     */
    public String getMyReaction() {
        return (String) get(16);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record17 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row17<Boolean, LocalDateTime, LocalDateTime, UUID, String, String, String, Boolean, Integer, String[], Integer, Boolean, String, LocalDateTime, UUID, String[], String> fieldsRow() {
        return (Row17) super.fieldsRow();
    }

    @Override
    public Row17<Boolean, LocalDateTime, LocalDateTime, UUID, String, String, String, Boolean, Integer, String[], Integer, Boolean, String, LocalDateTime, UUID, String[], String> valuesRow() {
        return (Row17) super.valuesRow();
    }

    @Override
    public Field<Boolean> field1() {
        return Post.POST.IS_DELETED;
    }

    @Override
    public Field<LocalDateTime> field2() {
        return Post.POST.TIME;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return Post.POST.TIME_CHANGED;
    }

    @Override
    public Field<UUID> field4() {
        return Post.POST.AUTHOR_ID;
    }

    @Override
    public Field<String> field5() {
        return Post.POST.TITLE;
    }

    @Override
    public Field<String> field6() {
        return Post.POST.TYPE;
    }

    @Override
    public Field<String> field7() {
        return Post.POST.POST_TEXT;
    }

    @Override
    public Field<Boolean> field8() {
        return Post.POST.IS_BLOCKED;
    }

    @Override
    public Field<Integer> field9() {
        return Post.POST.COMMENTS_COUNT;
    }

    @Override
    public Field<String[]> field10() {
        return Post.POST.TAGS;
    }

    @Override
    public Field<Integer> field11() {
        return Post.POST.LIKE_AMOUNT;
    }

    @Override
    public Field<Boolean> field12() {
        return Post.POST.MY_LIKE;
    }

    @Override
    public Field<String> field13() {
        return Post.POST.IMAGE_PATH;
    }

    @Override
    public Field<LocalDateTime> field14() {
        return Post.POST.PUBLISH_DATE;
    }

    @Override
    public Field<UUID> field15() {
        return Post.POST.ID;
    }

    @Override
    public Field<String[]> field16() {
        return Post.POST.REACTIONS;
    }

    @Override
    public Field<String> field17() {
        return Post.POST.MY_REACTION;
    }

    @Override
    public Boolean component1() {
        return getIsDeleted();
    }

    @Override
    public LocalDateTime component2() {
        return getTime();
    }

    @Override
    public LocalDateTime component3() {
        return getTimeChanged();
    }

    @Override
    public UUID component4() {
        return getAuthorId();
    }

    @Override
    public String component5() {
        return getTitle();
    }

    @Override
    public String component6() {
        return getType();
    }

    @Override
    public String component7() {
        return getPostText();
    }

    @Override
    public Boolean component8() {
        return getIsBlocked();
    }

    @Override
    public Integer component9() {
        return getCommentsCount();
    }

    @Override
    public String[] component10() {
        return getTags();
    }

    @Override
    public Integer component11() {
        return getLikeAmount();
    }

    @Override
    public Boolean component12() {
        return getMyLike();
    }

    @Override
    public String component13() {
        return getImagePath();
    }

    @Override
    public LocalDateTime component14() {
        return getPublishDate();
    }

    @Override
    public UUID component15() {
        return getId();
    }

    @Override
    public String[] component16() {
        return getReactions();
    }

    @Override
    public String component17() {
        return getMyReaction();
    }

    @Override
    public Boolean value1() {
        return getIsDeleted();
    }

    @Override
    public LocalDateTime value2() {
        return getTime();
    }

    @Override
    public LocalDateTime value3() {
        return getTimeChanged();
    }

    @Override
    public UUID value4() {
        return getAuthorId();
    }

    @Override
    public String value5() {
        return getTitle();
    }

    @Override
    public String value6() {
        return getType();
    }

    @Override
    public String value7() {
        return getPostText();
    }

    @Override
    public Boolean value8() {
        return getIsBlocked();
    }

    @Override
    public Integer value9() {
        return getCommentsCount();
    }

    @Override
    public String[] value10() {
        return getTags();
    }

    @Override
    public Integer value11() {
        return getLikeAmount();
    }

    @Override
    public Boolean value12() {
        return getMyLike();
    }

    @Override
    public String value13() {
        return getImagePath();
    }

    @Override
    public LocalDateTime value14() {
        return getPublishDate();
    }

    @Override
    public UUID value15() {
        return getId();
    }

    @Override
    public String[] value16() {
        return getReactions();
    }

    @Override
    public String value17() {
        return getMyReaction();
    }

    @Override
    public PostRecord value1(Boolean value) {
        setIsDeleted(value);
        return this;
    }

    @Override
    public PostRecord value2(LocalDateTime value) {
        setTime(value);
        return this;
    }

    @Override
    public PostRecord value3(LocalDateTime value) {
        setTimeChanged(value);
        return this;
    }

    @Override
    public PostRecord value4(UUID value) {
        setAuthorId(value);
        return this;
    }

    @Override
    public PostRecord value5(String value) {
        setTitle(value);
        return this;
    }

    @Override
    public PostRecord value6(String value) {
        setType(value);
        return this;
    }

    @Override
    public PostRecord value7(String value) {
        setPostText(value);
        return this;
    }

    @Override
    public PostRecord value8(Boolean value) {
        setIsBlocked(value);
        return this;
    }

    @Override
    public PostRecord value9(Integer value) {
        setCommentsCount(value);
        return this;
    }

    @Override
    public PostRecord value10(String[] value) {
        setTags(value);
        return this;
    }

    @Override
    public PostRecord value11(Integer value) {
        setLikeAmount(value);
        return this;
    }

    @Override
    public PostRecord value12(Boolean value) {
        setMyLike(value);
        return this;
    }

    @Override
    public PostRecord value13(String value) {
        setImagePath(value);
        return this;
    }

    @Override
    public PostRecord value14(LocalDateTime value) {
        setPublishDate(value);
        return this;
    }

    @Override
    public PostRecord value15(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public PostRecord value16(String[] value) {
        setReactions(value);
        return this;
    }

    @Override
    public PostRecord value17(String value) {
        setMyReaction(value);
        return this;
    }

    @Override
    public PostRecord values(Boolean value1, LocalDateTime value2, LocalDateTime value3, UUID value4, String value5, String value6, String value7, Boolean value8, Integer value9, String[] value10, Integer value11, Boolean value12, String value13, LocalDateTime value14, UUID value15, String[] value16, String value17) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        value17(value17);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PostRecord
     */
    public PostRecord() {
        super(Post.POST);
    }

    /**
     * Create a detached, initialised PostRecord
     */
    public PostRecord(Boolean isDeleted, LocalDateTime time, LocalDateTime timeChanged, UUID authorId, String title, String type, String postText, Boolean isBlocked, Integer commentsCount, String[] tags, Integer likeAmount, Boolean myLike, String imagePath, LocalDateTime publishDate, UUID id, String[] reactions, String myReaction) {
        super(Post.POST);

        setIsDeleted(isDeleted);
        setTime(time);
        setTimeChanged(timeChanged);
        setAuthorId(authorId);
        setTitle(title);
        setType(type);
        setPostText(postText);
        setIsBlocked(isBlocked);
        setCommentsCount(commentsCount);
        setTags(tags);
        setLikeAmount(likeAmount);
        setMyLike(myLike);
        setImagePath(imagePath);
        setPublishDate(publishDate);
        setId(id);
        setReactions(reactions);
        setMyReaction(myReaction);
        resetChangedOnNotNull();
    }
}
